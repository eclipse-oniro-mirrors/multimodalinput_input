# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("../../../multimodalinput_mini.gni")

module_output_path = "input/input"

ohos_unittest("InputDeviceManagerTestWithMock") {
  module_out_path = module_output_path
  defines = input_default_defines

  configs = [
    "${mmi_path}:coverage_flags",
    "${mmi_path}/common/anco/comm:mmi_anco_channel_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  include_dirs = [
    "${mmi_path}/service/connect_manager/include",
    "${mmi_path}/service/delegate_task/include",
    "${mmi_path}/service/device_config/include",
    "${mmi_path}/service/device_manager/include",
    "${mmi_path}/service/dfx/include",
    "${mmi_path}/service/event_dispatch/include",
    "${mmi_path}/service/event_handler/include",
    "${mmi_path}/service/joystick/include",
    "${mmi_path}/service/key_command/include",
    "${mmi_path}/service/key_event_normalize/include",
    "${mmi_path}/service/module_loader/include",
    "${mmi_path}/service/monitor/include",
    "${mmi_path}/service/event_hook/include",
    "${mmi_path}/service/mouse_event_normalize/include",
    "${mmi_path}/service/nap_process/include",
    "${mmi_path}/service/product_property_config/include",
    "${mmi_path}/service/subscriber/include",
    "${mmi_path}/service/touch_event_normalize/include",
  ]

  sources = [
    "${mmi_path}/service/device_manager/src/input_device_manager.cpp",
    "src/input_device_manager_test_with_mock.cpp",
  ]

  deps = [
    "${mmi_path}/service/custom_config_parser:mmi_custom_config_parser",
    "${mmi_path}/test/facility/event_filter_mock:event_filter_mock",
    "${mmi_path}/test/facility/event_handler_mock:event_handler_mock",
    "${mmi_path}/test/facility/interceptor_mock:event_interceptor_mock",
    "${mmi_path}/test/facility/mock:mmi_mock_sources",
    "${mmi_path}/test/facility/timer_manager_mock:timer_manager_mock",
    "${mmi_path}/util:libmmi-util",
    "${mmi_path}/util:mmi_json_parser",
  ]

  external_deps = [
    "c_utils:utils",
    "cJSON:cjson",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "preferences:native_preferences",
  ]
}

group("DeviceManagerTests") {
  testonly = true

  deps = [
    ":InputDeviceManagerTestWithMock"
  ]
}
