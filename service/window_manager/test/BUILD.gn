# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("../../../multimodalinput_mini.gni")

module_output_path = "input/input"

ohos_unittest("InputWindowsManagerTestWithMock") {
  module_out_path = module_output_path

  configs = [ "${mmi_path}:coverage_flags" ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  include_dirs = [
    "${mmi_path}/interfaces/native/innerkits/common/include",
    "${mmi_path}/interfaces/native/innerkits/proxy/include",
    "${mmi_path}/service/app_state_manager/include",
    "${mmi_path}/service/connect_manager/include",
    "${mmi_path}/service/delegate_task/include",
    "${mmi_path}/service/device_config/include",
    "${mmi_path}/service/device_manager/include",
    "${mmi_path}/service/device_state_manager/include",
    "${mmi_path}/service/dfx/include",
    "${mmi_path}/service/display_state_manager/include",
    "${mmi_path}/service/event_dispatch/include",
    "${mmi_path}/service/event_handler/include",
    "${mmi_path}/service/filter/include",
    "${mmi_path}/service/fingersense_wrapper/include",
    "${mmi_path}/service/gesturesense_wrapper/include",
    "${mmi_path}/service/hardware_cursor_pointer_manager/include",
    "${mmi_path}/service/interceptor/include",
    "${mmi_path}/service/joystick/include",
    "${mmi_path}/service/key_command/include",
    "${mmi_path}/service/key_event_normalize/include",
    "${mmi_path}/service/libinput_adapter/include",
    "${mmi_path}/service/module_loader/include",
    "${mmi_path}/service/monitor/include",
    "${mmi_path}/service/mouse_event_normalize/include",
    "${mmi_path}/service/nap_process/include",
    "${mmi_path}/service/subscriber/include",
    "${mmi_path}/service/timer_manager/include",
    "${mmi_path}/service/touch_event_normalize/include",
    "${mmi_path}/service/window_manager/include",
    "${mmi_path}/test/facility/mock/include",
    "${mmi_path}/util/common/include",
    "${mmi_path}/util/network/include",
    "${mmi_path}/util/socket/include",
  ]

  sources = [
    "${mmi_path}/service/delegate_task/src/delegate_interface.cpp",
    "${mmi_path}/service/device_manager/src/input_device_manager.cpp",
    "${mmi_path}/service/dfx/src/api_duration_statistics.cpp",
    "${mmi_path}/service/dfx/src/dfx_hisysevent.cpp",
    "${mmi_path}/service/display_state_manager/src/display_event_monitor.cpp",
    "${mmi_path}/service/event_dispatch/src/event_dispatch_handler.cpp",
    "${mmi_path}/service/event_handler/src/anr_manager.cpp",
    "${mmi_path}/service/event_handler/src/input_event_handler.cpp",
    "${mmi_path}/service/fingersense_wrapper/src/fingersense_wrapper.cpp",
    "${mmi_path}/service/key_command/src/setting_datashare.cpp",
    "${mmi_path}/service/key_command/src/setting_observer.cpp",
    "${mmi_path}/service/libinput_adapter/src/property_reader.cpp",
    "${mmi_path}/service/module_loader/src/app_debug_listener.cpp",
    "${mmi_path}/service/module_loader/src/multimodal_input_preferences_manager.cpp",
    "${mmi_path}/service/module_loader/src/uds_server.cpp",
    "${mmi_path}/service/timer_manager/src/timer_manager.cpp",
    "${mmi_path}/service/window_manager/src/input_display_bind_helper.cpp",
    "${mmi_path}/service/window_manager/src/input_windows_manager.cpp",
    "${mmi_path}/service/window_manager/src/knuckle_drawing_manager.cpp",
    "input_windows_manager_test_with_mock.cpp",
  ]

  if (input_feature_pointer_drawing) {
    sources += [
      "${mmi_path}/service/window_manager/src/pointer_drawing_manager.cpp",
      "${mmi_path}/service/window_manager/src/pointer_renderer.cpp",
      "${mmi_path}/service/window_manager/src/screen_pointer.cpp",
    ]
  } else {
    sources += [ "${mmi_path}/service/window_manager/src/i_pointer_drawing_manager.cpp" ]
  }

  if (input_feature_touch_drawing) {
    sources += [ "${mmi_path}/service/window_manager/src/touch_drawing_manager.cpp" ]
  }

  if (input_feature_mouse) {
    sources += [
      "${mmi_path}/service/mouse_event_normalize/src/mouse_event_normalize.cpp",
      "${mmi_path}/service/mouse_event_normalize/src/mouse_transform_processor.cpp",
    ]
  }

  if (input_feature_combination_key) {
    sources += [
      "${mmi_path}/service/key_command/src/pull_throw_subscriber_handler.cpp",
    ]
  }

  if (input_feature_touchscreen && input_feature_monitor) {
    sources += [
      "${mmi_path}/service/touch_event_normalize/src/touch_gesture_adapter.cpp",
      "${mmi_path}/service/touch_event_normalize/src/touch_gesture_detector.cpp",
      "${mmi_path}/service/touch_event_normalize/src/touch_gesture_manager.cpp",
    ]
  }

  if (input_ext_feature_anco) {
    sources += [
      "${mmi_ext_path}/anco_uds_manager/src/anco_uds_manager.cpp",
      "${mmi_ext_path}/anco_uds_manager/src/input_common_monitor.cpp",
      "${mmi_ext_path}/anco_uds_manager/src/input_windows_manager_ext.cpp",
    ]
  }

  defines = []

  if (defined(use_rosen_drawing) && use_rosen_drawing) {
    defines += [ "USE_ROSEN_DRAWING" ]
  }

  if (input_ext_feature_anco) {
    defines += [ "OHOS_BUILD_ENABLE_ANCO" ]
  }

  deps = [
    "${mmi_path}/service/filter:mmi_event_filter_proxy",
    "${mmi_path}/util:libmmi-util",
  ]

  if (input_ext_feature_anco) {
    deps += [ "${mmi_path}/common/anco/comm:mmi_anco_channel_proxy" ]
  }

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_manager",
    "ability_runtime:abilitykit_native",
    "ability_runtime:abilitykit_native",
    "ability_runtime:app_manager",
    "ability_runtime:dataobs_manager",
    "cJSON:cjson",
    "c_utils:utils",
    "call_manager:tel_call_manager_api",
    "common_event_service:cesfwk_innerkits",
    "config_policy:configpolicy_util",
    "data_share:datashare_consumer",
    "drivers_interface_display:libdisplay_composer_hdi_impl_1.2",
    "drivers_interface_display:libdisplay_composer_proxy_1.0",
    "ffrt:libffrt",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:libcomposer",
    "graphic_2d:librender_service_client",
    "graphic_2d:window_animation",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "image_framework:image_native",
    "init:libbeget_proxy",
    "init:libbegetutil",
    "ipc:ipc_single",
    "libinput:libinput-third-mmi",
    "napi:ace_napi",
    "preferences:native_preferences",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "window_manager:libwm_lite",
    "window_manager:libwm",
    "window_manager:libwsutils",
  ]
}

group("WindowManagerTests") {
  testonly = true

  deps = [
    ":InputWindowsManagerTestWithMock",
  ]
}
