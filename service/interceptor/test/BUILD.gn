# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("../../../multimodalinput_mini.gni")

module_output_path = "input/input"

ohos_unittest("LocalHotKeyHandlerTest") {
  module_out_path = module_output_path
  defines = input_default_defines

  configs = [ "${mmi_path}:coverage_flags" ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  include_dirs = [
    "${mmi_path}/service/app_state_manager/include",
    "${mmi_path}/service/connect_manager/include",
    "${mmi_path}/service/delegate_task/include",
    "${mmi_path}/service/dfx/include",
    "${mmi_path}/service/interceptor/include",
    "${mmi_path}/service/module_loader/include",
    "${mmi_path}/service/monitor/include",
    "${mmi_path}/service/nap_process/include",
    "${mmi_path}/service/subscriber/include",
    "${mmi_path}/service/touch_event_normalize/include",
    "${mmi_path}/service/window_manager/include",
  ]

  sources = [
    "${mmi_path}/service/interceptor/src/local_hotkey_handler.cpp",
    "src/local_hot_key_handler_test.cpp",
  ]

  deps = [
    "${mmi_path}/frameworks/proxy:libmmi-common",
    "${mmi_path}/test/facility/config_policy_utils_mock:config_policy_utils_mock",
    "${mmi_path}/test/facility/device_manager_mock:device_manager_mock",
    "${mmi_path}/test/facility/event_dispatch_mock:event_dispatch_mock",
    "${mmi_path}/test/facility/event_filter_mock:event_filter_mock",
    "${mmi_path}/test/facility/event_handler_mock:event_handler_mock",
    "${mmi_path}/test/facility/init_libbegetutil_mock:init_libbegetutil_mock",
    "${mmi_path}/test/facility/key_command_mock:key_command_mock",
    "${mmi_path}/test/facility/mock:mmi_mock_sources",
    "${mmi_path}/util:libmmi-util",
    "${mmi_path}/util:mmi_json_parser",
  ]

  external_deps = [
    "ability_runtime:app_manager",
    "c_utils:utils",
    "cJSON:cjson",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "ipc:ipc_single",
    "samgr:samgr_proxy",
  ]
}

group("EventInterceptorTests") {
  testonly = true

  deps = []

  if (input_feature_interceptor && input_feature_keyboard) {
      deps += [ ":LocalHotKeyHandlerTest" ]
  }
}
