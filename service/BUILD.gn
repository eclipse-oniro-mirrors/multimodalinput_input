# Copyright (c) 2021-2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/test.gni")
import("../multimodalinput_mini.gni")

defines = input_default_defines
module_output_path = "input/input"
mmi_service_path = "${mmi_path}/service"

ohos_prebuilt_etc("mmi_device_config.ini") {
  source = "mmi_device_config.ini"
  relative_install_dir = "."
  subsystem_name = "multimodalinput"
  part_name = "input"
}

config("libmmi_server_config") {
  if (is_ohos && is_clang && (target_cpu == "arm" || target_cpu == "arm64") &&
      enhanced_opt) {
    cflags = []
    if (input_feature_enable_pgo && input_feature_product != "default") {
      cflags += [
        "-fprofile-use=" +
            rebase_path("${input_feature_pgo_path}/libmmi-server.profdata",
                        root_build_dir),
        "-Wno-error=backend-plugin",
        "-Wno-profile-instr-out-of-date",
        "-Wno-profile-instr-unprofiled",
        "-Oz",
      ]
    }
    if (input_feature_product == "pc" && target_cpu == "arm64") {
      cflags += [
        "-moutline-atomics",
        "-Oz",
      ]
    }
  }
  include_dirs = [
    "account_manager/include",
    "app_state_manager/include",
    "device_config/include",
    "device_manager/include",
    "device_scalability/include",
    "device_state_manager/include",
    "delegate_task/include",
    "display_state_manager/include",
    "event_dispatch/include",
    "key_event_normalize/include",
    "event_handler/include",
    "event_dump/include",
    "fingersense_wrapper/include",
    "gesturesense_wrapper/include",
    "monitor/include",
    "interceptor/include",
    "dfx/include",
    "libinput_adapter/include",
    "message_handle/include",
    "module_loader/include",
    "window_manager/include",
    "touch_event_normalize/include",
    "key_command/include",
    "subscriber/include",
    "timer_manager/include",
    "permission_helper/include",
    "${mmi_service_path}/connect_manager/include",
    "${mmi_service_path}/device_state_manager/include",
    "${mmi_service_path}/filter/include",
    "${mmi_service_path}/module_loader/include",
    "${mmi_service_path}/nap_process/include",
    "${mmi_service_path}/event_resample/include",
    "${mmi_path}/interfaces/native/innerkits/proxy/include",
    "${mmi_path}/interfaces/native/innerkits/event/include",
    "mouse_event_normalize/include",
    "crown_transform_processor/include",
    "${mmi_path}/interfaces/native/innerkits/common/include",
    "${mmi_path}/util/common/include",
    "${mmi_path}/util/socket/include",
    "${mmi_path}/util/network/include",
    "${mmi_path}/frameworks/proxy/event_handler/include",
    "${mmi_path}/util/napi/include",
    "${mmi_path}/util/json_parser/include",
    "${mmi_service_path}/product_property_config/include",
    "${mmi_service_path}/custom_config_parser/include",
    "${mmi_path}/service/event_hook/include",
    "${mmi_path}/service/event_hook/include/hook",
    "${mmi_path}/service/event_hook/include/checker",
  ]

  if (input_feature_product != "watch") {
    include_dirs += [ "infrared_emitter/include" ]
  }

  if (input_ext_feature_keyboard_ext_flag) {
    ohos_prebuilt_etc("keyboard_ext_flag.json") {
      source = "${mmi_ext_path}/keyboard_ext_flag/etc/keyboard_ext_flag.json"
      part_name = "input"
      subsystem_name = "multimodalinput"
      relative_install_dir = "multimodalinput"
    }
  }

  if (input_feature_fingerprint) {
    include_dirs += [ "fingerprint_event_processor/include" ]
  }

  if (input_ext_feature_anco) {
    include_dirs += [
      "${mmi_ext_path}/anco_uds_manager/include",
      "${mmi_path}/common/anco/comm/include",
    ]
  }

  if (input_feature_combination_key) {
    defines += [ "OHOS_BUILD_ENABLE_COMBINATION_KEY" ]
  }

  if (resource_schedule_service_enabled) {
    defines += [ "OHOS_RSS_CLIENT" ]
  }

  if (is_emulator) {
    defines += [ "OHOS_BUILD_EMULATOR" ]
  }

  if (input_feature_joystick) {
    include_dirs += [ "${mmi_service_path}/joystick/include" ]
  }

  if (input_feature_key_hook) {
    include_dirs += [ "${mmi_service_path}/event_hook/include" ]
  }
}

ohos_rust_shared_ffi("mmi_rust") {
  sources = [ "rust/src/lib.rs" ]
  external_deps = [ "hilog:hilog_rust" ]
  subsystem_name = "multimodalinput"
  part_name = "input"
}

ohos_rust_unittest("rust_mmi_test") {
  module_out_path = module_output_path
  sources = [ "rust/src/lib.rs" ]
  deps = [ ":mmi_rust" ]
  external_deps = [ "hilog:hilog_rust" ]
  subsystem_name = "multimodalinput"
  part_name = "input"
}

ohos_shared_library("libcursor_drawing_adapter") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  include_dirs = [
    "connect_manager/include",
    "delegate_task/include/",
    "device_config/include",
    "device_manager/include/",
    "dfx/include",
    "event_handler/include",
    "hardware_cursor_pointer_manager/include",
    "module_loader/include/",
    "mouse_event_normalize/include",
    "timer_manager/include/",
    "touch_event_normalize/include",
    "key_command/include",
    "${mmi_path}/frameworks/proxy/event_handler/include",
    "${mmi_path}/interfaces/native/innerkits/event/include",
    "${mmi_path}/interfaces/native/innerkits/proxy/include",
    "${mmi_path}/util/common/include",
    "${mmi_path}/util/network/include/",
    "${mmi_path}/util/socket/include/",
    "window_manager/include",
    "${mmi_service_path}/product_property_config/include",
    "${mmi_service_path}/custom_config_parser/include",
  ]

  if (input_ext_feature_magiccursor) {
    include_dirs += [
      "${mmi_ext_path}/magic_cursor/include",
      "${g2d_ext_path}/sdf/include",
      "${surface_path}/interfaces/inner_api/surface",
      "${g2d_path}/rosen/modules/render_service_base/src",
    ]
  }

  sources = [ "window_manager/src/cursor_drawing_adapter.cpp" ]
  if (input_feature_pointer_drawing) {
    sources += [
      "hardware_cursor_pointer_manager/src/hardware_cursor_pointer_manager.cpp",
      "window_manager/src/pointer_drawing_manager.cpp",
      "window_manager/src/pointer_renderer.cpp",
      "window_manager/src/screen_pointer.cpp",
    ]
  } else {
    sources += [ "window_manager/src/i_pointer_drawing_manager.cpp" ]
  }

  deps = [
    "${mmi_path}/common/anco/comm:mmi_anco_channel_proxy",
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
    "${mmi_path}/service/custom_config_parser:mmi_custom_config_parser",
    "${mmi_path}/util:mmi_json_parser",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_consumer",
    "drivers_interface_display:libdisplay_composer_hdi_impl_1.2",
    "drivers_interface_display:libdisplay_composer_proxy_1.0",
    "ffrt:libffrt",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_base",
    "graphic_2d:librender_service_client",
    "graphic_surface:surface",
    "hisysevent:libhisysevent",
    "image_framework:image_native",
    "init:libbeget_proxy",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "window_manager:libdm_lite",
    "window_manager:libwsutils",
    "eventhandler:libeventhandler",
  ]

  if (input_feature_pointer_drawing) {
    external_deps += [ "window_manager:libwm_lite" ]
  }

  if (input_ext_feature_magiccursor) {
    external_deps += [ "eventhandler:libeventhandler" ]
  }

  if (input_feature_product != "watch") {
    deps += [ "${mmi_path}/etc/mouse_icon:input_mouse_icon" ]
    external_deps += [
      "graphic_2d:libcomposer",
      "graphic_2d:librender_service_base",
      "hilog:libhilog",
      "image_framework:image_native",
      "init:libbegetutil",
      "ipc:ipc_single",
      "safwk:system_ability_fwk",
      "window_manager:libwm_lite",
    ]
  }
  if (resource_schedule_service_enabled) {
    external_deps += [ "resource_schedule_service:ressched_client" ]
  }
  if (hitrace_enabled) {
    external_deps += [ "hitrace:hitrace_meter" ]
  }

  if (defined(use_rosen_drawing) && use_rosen_drawing) {
    defines += [ "USE_ROSEN_DRAWING" ]
  }

  if (is_emulator) {
    defines += [ "OHOS_BUILD_EMULATOR" ]
  }
  part_name = "input"
  subsystem_name = "multimodalinput"
}

ohos_shared_library("libmmi-server") {
  sources = libmmi_service_sources
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  version_script = "libmmi-server-map"
  include_dirs = [
    "delegate_task/include",
    "${mmi_path}/frameworks/proxy/events/include",
    "window_manager/include",
    "${mmi_path}/util/json_parser/include",
    "${mmi_service_path}/product_property_config/include",
  ]

  sources += [
    "account_manager/src/account_manager.cpp",
    "display_state_manager/src/display_event_monitor.cpp",
    "subscriber/src/tablet_subscriber_handler.cpp",
    "window_manager/src/cursor_drawing_component.cpp",
  ]

  if (input_feature_keyboard) {
    sources += [
      "key_event_normalize/src/key_event_normalize.cpp",
      "key_event_normalize/src/key_unicode_transformation.cpp",
      "monitor/src/event_pre_monitor_handler.cpp",
      "subscriber/src/key_gesture_manager.cpp",
      "subscriber/src/key_subscriber_handler.cpp",
    ]
    if (input_feature_combination_key) {
      sources += [
        "key_command/src/key_command_handler.cpp",
        "key_command/src/key_command_handler_util.cpp",
        "key_command/src/long_press_subscriber_handler.cpp",
        "key_command/src/pull_throw_subscriber_handler.cpp",
        "key_command/src/stylus_key_handler.cpp",
      ]
    }
    if (input_shortcut_key_manager_enabled) {
      sources += [ "subscriber/src/key_shortcut_manager.cpp" ]
      defines += [ "SHORTCUT_KEY_MANAGER_ENABLED" ]

      if (input_shortcut_key_rules_enabled) {
        defines += [ "SHORTCUT_KEY_RULES_ENABLED" ]
      }
    } else {
      sources += [ "subscriber/src/key_shortcut_manager_variant.cpp" ]
    }
    if (input_feature_key_pressed_handler) {
      sources += [ "subscriber/src/key_monitor_manager.cpp" ]
    }
  }

  if (input_feature_switch) {
    sources += [ "subscriber/src/switch_subscriber_handler.cpp" ]
  }

  if (input_feature_mouse || input_feature_touchscreen) {
    sources += [ "touch_event_normalize/src/touch_event_normalize.cpp" ]
    if (input_feature_mouse) {
      sources += [
        "crown_transform_processor/src/crown_transform_processor.cpp",
        "mouse_event_normalize/src/mouse_device_state.cpp",
        "mouse_event_normalize/src/mouse_event_normalize.cpp",
        "mouse_event_normalize/src/mouse_transform_processor.cpp",
        "touch_event_normalize/src/touchpad_transform_processor.cpp",
      ]
    }
    if (input_feature_touchscreen) {
      sources += [
        "event_resample/src/event_resample.cpp",
        "touch_event_normalize/src/remote_control_transform_processor.cpp",
        "touch_event_normalize/src/touch_transform_processor.cpp",
      ]
    }
  }
  if (input_feature_touchscreen && input_feature_monitor) {
    sources += [
      "touch_event_normalize/src/touch_gesture_adapter.cpp",
      "touch_event_normalize/src/touch_gesture_detector.cpp",
      "touch_event_normalize/src/touch_gesture_manager.cpp",
    ]

    if (input_feature_product == "pc") {
      defines += [ "TOUCH_GESTURE_MONITOR_ENABLED" ]
    }
  }
  if (input_feature_fingerprint) {
    sources += [
      "fingerprint_event_processor/src/fingerprint_event_processor.cpp",
      "fingerprint_event_processor/src/x_key_event_processor.cpp",
    ]
  }
  if (input_feature_joystick) {
    sources += [
      "joystick/src/joystick_event_normalize.cpp",
      "joystick/src/joystick_event_processor.cpp",
    ]
  }
  if (input_feature_monitor) {
    sources += [
      "monitor/src/event_monitor_handler.cpp",
      "monitor/src/gesture_monitor_handler.cpp",
    ]
  }
  if (input_feature_interceptor) {
    sources += [ "interceptor/src/event_interceptor_handler.cpp" ]
    if (input_feature_keyboard) {
      sources += [ "interceptor/src/local_hotkey_handler.cpp" ]
    }
  }

  if (input_feature_touch_drawing) {
    sources += [ "window_manager/src/touch_drawing_manager.cpp" ]
  }

  if (input_feature_key_hook) {
    sources += [
      "event_hook/src/key_event_hook_manager.cpp",
      "event_hook/src/event_loop_closure_checker.cpp",
      "event_hook/src/event_dispatch_order_checker.cpp",
      "event_hook/src/event_expiration_checker.cpp"
    ]
  }

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
    "${mmi_path}/service/connect_manager:mmi_connect_manager_config",
    "${mmi_path}/service/filter:mmi_event_filter_config",
    "${mmi_path}/common/anco/comm:mmi_anco_channel_config",
  ]

  deps = [
    ":mmi_device_config.ini",
    ":mmi_rust",
    "${mmi_path}/frameworks/proxy:libmmi-common",
    "${mmi_path}/intention/scheduler/component_manager:mmi_component_manager",
    "${mmi_path}/service/connect_manager:mmi_connect_manager_service",
    "${mmi_path}/service/filter:mmi_event_filter_proxy",
    "${mmi_path}/util:libmmi-util",
  ]

  if (input_feature_product != "watch") {
    deps += [ "${mmi_path}/etc/mouse_icon:input_mouse_icon" ]
  }

  deps += [ "${mmi_path}/common/anco/comm:mmi_anco_channel_proxy" ]

  deps += [ "${mmi_path}/util:mmi_json_parser" ]

  if (input_ext_feature_keyboard_ext_flag) {
    include_dirs += [ "${mmi_ext_path}/keyboard_ext_flag/inc" ]

    deps += [ ":keyboard_ext_flag.json" ]
  }

  deps += ["${mmi_path}/service/custom_config_parser:mmi_custom_config_parser"]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utils",
    "graphic_surface:surface",
  ]

  if (input_feature_pointer_drawing) {
    external_deps += [ "window_manager:libwm_lite" ]
  }

  if (input_ext_feature_magiccursor) {
    external_deps += [ "eventhandler:libeventhandler" ]
  }

  if (security_component_enable) {
    external_deps += [ "security_component_manager:libsecurity_component_sdk" ]
  }

  if (resource_schedule_service_enabled) {
    external_deps += [ "resource_schedule_service:ressched_client" ]
  }

  if (call_manager_service_enabled) {
    external_deps += [ "call_manager:tel_call_manager_api" ]
  }

  if (screenlock_manager_enabled) {
    defines += [ "SCREENLOCK_MANAGER_ENABLED" ]
    external_deps += [ "screenlock_mgr:screenlock_client" ]
  }

  if (factory) {
    cflags_cc = [ "-DCONFIG_FACTORY_VERSION" ]
  }

  if (input_feature_product == "pc") {
    external_deps += [ "eventhandler:libeventhandler" ]
  }

  if (input_feature_touch_drawing) {
    external_deps += [
      "graphic_2d:librender_service_client",
      "graphic_2d:window_animation",
    ]
  }

  if (input_feature_combination_key) {
    external_deps += [ "sensor:sensor_interface_native" ]
  }

  external_deps += [
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_manager",
    "ability_runtime:app_manager",
    "access_token:libtokenid_sdk",
    "access_token:libprivacy_sdk",
    "config_policy:configpolicy_util",
    "data_share:datashare_consumer",
    "faultloggerd:libbacktrace_local",
    "faultloggerd:libdfx_dumpcatcher",
    "faultloggerd:libjson_stack_formatter",
    "ffrt:libffrt",
    "hicollie:libhicollie",
    "hisysevent:libhisysevent",
    "image_framework:image_native",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "window_manager:libdm_lite",
    "window_manager:libwm_lite",
    "window_manager:libwsutils",
  ]

  if (input_feature_product != "watch") {
    sources += [
      "infrared_emitter/src/infrared_emitter_controller.cpp",
      "window_manager/src/knuckle_drawing_component.cpp",
    ]

    deps += [ "${mmi_path}/etc/mouse_icon:input_mouse_icon" ]

    if (input_feature_mouse || input_feature_touchscreen) {
      if (input_feature_mouse) {
        sources +=
            [ "touch_event_normalize/src/gesture_transform_processor.cpp" ]
      }
      if (input_feature_touchscreen) {
        sources +=
            [ "touch_event_normalize/src/tablet_tool_tranform_processor.cpp" ]
      }
    }

    external_deps += [
      "common_event_service:cesfwk_innerkits",
      "hdf_core:libhdi",
      "hilog:libhilog",
      "image_framework:image_native",
      "init:libbeget_proxy",
      "init:libbegetutil",
      "ipc:ipc_single",
      "safwk:system_ability_fwk",
    ]
  }

  if (hitrace_enabled) {
    external_deps += [ "hitrace:hitrace_meter" ]
  }

  if (defined(use_rosen_drawing) && use_rosen_drawing) {
    defines += [ "USE_ROSEN_DRAWING" ]
  }

  part_name = "input"
  subsystem_name = "multimodalinput"
}

config("libmmi_knuckle_config") {
  if (is_ohos && is_clang && (target_cpu == "arm" || target_cpu == "arm64") &&
      enhanced_opt) {
    cflags = []
    if (input_feature_enable_pgo && input_feature_product != "default") {
      cflags += [
        "-fprofile-use=" +
            rebase_path("${input_feature_pgo_path}/libmmi-server.profdata",
                        root_build_dir),
        "-Wno-error=backend-plugin",
        "-Wno-profile-instr-out-of-date",
        "-Wno-profile-instr-unprofiled",
        "-Oz",
      ]
    }
    if (input_feature_product == "pc" && target_cpu == "arm64") {
      cflags += [
        "-moutline-atomics",
        "-Oz",
      ]
    }
  }
}

ohos_shared_library("libmmi-knuckle") {
  include_dirs = [
    "${mmi_path}/interfaces/native/innerkits/proxy/include",
    "${mmi_service_path}/window_manager/include",
    "${mmi_path}/service/touch_event_normalize/include",
    "${mmi_path}/service/delegate_task/include",
    "${mmi_path}/service/event_handler/include",
    "${mmi_path}/service/module_loader/include",
    "${mmi_path}/util/common/include",
    "${mmi_path}/service/connect_manager/include",
    "${mmi_path}/service/key_command/include",
    "${mmi_path}/service/timer_manager/include",
  ]

  sources = [
    "window_manager/src/knuckle_divergent_point.cpp",
    "window_manager/src/knuckle_drawing.cpp",
    "window_manager/src/knuckle_drawing_manager.cpp",
    "window_manager/src/knuckle_dynamic_drawing_manager.cpp",
    "window_manager/src/knuckle_glow_point.cpp",
    "window_manager/src/knuckle_glow_trace_system.cpp",
  ]

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_knuckle_config",
    "${mmi_path}/service/filter:mmi_event_filter_config",
    "${mmi_path}/service/connect_manager:mmi_connect_manager_config",
    "${mmi_path}/common/anco/comm:mmi_anco_channel_config",
  ]

  if (defined(use_rosen_drawing) && use_rosen_drawing) {
    defines += [ "USE_ROSEN_DRAWING" ]
  }

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "data_share:datashare_consumer",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_base",
    "graphic_2d:librender_service_client",
    "libinput:libinput-third-mmi",
    "samgr:samgr_proxy",
    "window_manager:libwm_lite",
  ]

  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  cflags_cc = [ "-Wno-unused-private-field" ]

  part_name = "input"
  subsystem_name = "multimodalinput"
}

import("//build/test.gni")
module_output_path = "input/input"

ohos_unittest("event_resample_test") {
  module_out_path = module_output_path
  include_dirs = [ "${mmi_path}/service/event_resample/include" ]

  sources = [
    "event_resample/src/event_resample.cpp",
    "event_resample/test/event_resample_test.cpp",
  ]

  configs = [ ":libmmi_server_config" ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
    "${mmi_path}/frameworks/proxy:libmmi-common",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utils",
    "config_policy:configpolicy_util",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "window_manager:libwm",
  ]
}

ohos_unittest("TwoFingerLongTouchTest") {
  module_out_path = module_output_path
  include_dirs = [
    "${mmi_path}/service/key_command/include",
    "${mmi_path}/service/key_command/test",
  ]

  configs = [ ":libmmi_server_config" ]

  cflags = [ "-DUNIT_TEST" ]

  sources = [
    "key_command/src/key_command_handler.cpp",
    "key_command/src/key_command_handler_util.cpp",
    "key_command/test/ability_manager_client_stub.cpp",
    "key_command/test/two_finger_long_touch_test.cpp",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
    "${mmi_path}/frameworks/proxy:libmmi-common",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "config_policy:configpolicy_util",
    "data_share:datashare_consumer",
    "eventhandler:libeventhandler",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:libcomposer",
    "graphic_2d:librender_service_base",
    "graphic_2d:librender_service_client",
    "graphic_2d:window_animation",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "samgr:samgr_proxy",
    "window_manager:libwm",
  ]
}

ohos_unittest("EventFilterDeathRecipientTest") {
  module_out_path = module_output_path

  include_dirs = [ "${mmi_path}/service/filter/include" ]

  configs = [ ":libmmi_server_config" ]

  cflags = [ "-DUNIT_TEST" ]

  sources = [
    "${mmi_path}/service/filter/src/event_filter_death_recipient.cpp",
    "${mmi_path}/service/filter/test/event_filter_death_recipient_test.cpp",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utils",
    "config_policy:configpolicy_util",
    "data_share:datashare_consumer",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "window_manager:libwm",
  ]
}

ohos_unittest("EventFilterHandlerTest") {
  module_out_path = module_output_path

  include_dirs = [
    "${mmi_path}/service/filter/include",
    "${mmi_path}/service/filter/test",
  ]

  configs = [
    ":libmmi_server_config",
    "${mmi_path}/service/filter:mmi_event_filter_config",
    "${mmi_path}/common/anco/comm:mmi_anco_channel_config",
  ]

  cflags = [
    "-DUNIT_TEST",
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = true
    blocklist = "./ipc_blocklist.txt"
  }

  sources = [
    "${mmi_path}/service/filter/test/event_filter_handler_ex_test.cpp",
    "${mmi_path}/service/filter/test/event_filter_handler_test.cpp",
    "${mmi_path}/service/filter/test/message_parcel_mock.cpp",
    "${mmi_path}/service/filter/test/mock.cpp",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/service/filter:mmi_event_filter_proxy",
    "${mmi_path}/service/filter:mmi_event_filter_service",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utils",
    "config_policy:configpolicy_util",
    "data_share:datashare_consumer",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_single",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "window_manager:libdm_lite",
    "window_manager:libwm",
  ]
}

ohos_unittest("ApplicationStateObserverTest") {
  module_out_path = module_output_path

  include_dirs = [ "${mmi_path}/service/app_state_manager/include" ]

  configs = [ ":libmmi_server_config" ]

  cflags = [
    "-DUNIT_TEST",
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [
    "${mmi_path}/service/app_state_manager/src/app_state_observer.cpp",
    "${mmi_path}/service/app_state_manager/test/app_state_observer_test.cpp",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "ability_runtime:ability_manager",
    "ability_runtime:app_manager",
    "cJSON:cjson",
    "c_utils:utils",
    "config_policy:configpolicy_util",
    "data_share:datashare_consumer",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_single",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "window_manager:libwm",
  ]
}

ohos_unittest("KeyShortcutManagerTest") {
  module_out_path = module_output_path

  include_dirs = [
    "${mmi_path}/interfaces/native/innerkits/proxy/include",
    "${mmi_path}/service/app_state_manager/include",
    "${mmi_path}/service/connect_manager/include",
    "${mmi_path}/service/delegate_task/include",
    "${mmi_path}/service/device_config/include",
    "${mmi_path}/service/device_manager/include",
    "${mmi_path}/service/display_state_manager/include",
    "${mmi_path}/service/dfx/include",
    "${mmi_path}/service/event_dispatch/include",
    "${mmi_path}/service/event_handler/include",
    "${mmi_path}/service/filter/include",
    "${mmi_path}/service/fingersense_wrapper/include",
    "${mmi_path}/service/hardware_cursor_pointer_manager/include",
    "${mmi_path}/service/interceptor/include",
    "${mmi_path}/service/key_command/include",
    "${mmi_path}/service/key_event_normalize/include",
    "${mmi_path}/service/module_loader/include",
    "${mmi_path}/service/monitor/include",
    "${mmi_path}/service/event_hook/include",
    "${mmi_path}/service/mouse_event_normalize/include",
    "${mmi_path}/service/nap_process/include",
    "${mmi_path}/service/subscriber/include",
    "${mmi_path}/service/subscriber/test/include",
    "${mmi_path}/service/touch_event_normalize/include",
    "${mmi_path}/service/window_manager/include",
    "${mmi_path}/service/event_hook/include",
    "${mmi_path}/service/event_hook/include/hook",
    "${mmi_path}/service/event_hook/include/checker",
  ]

  if (input_ext_feature_anco) {
    include_dirs += [ "${mmi_path}/common/anco/comm/include" ]
  }

  if (input_feature_joystick) {
    include_dirs += [ "${mmi_path}/service/joystick/include" ]
  }

  sources = [
    "${mmi_path}/service/app_state_manager/src/app_state_observer.cpp",
    "${mmi_path}/service/device_config/src/device_config_file_parser.cpp",
    "${mmi_path}/service/device_manager/src/input_device_manager.cpp",
    "${mmi_path}/service/device_manager/src/pointer_device_manager.cpp",
    "${mmi_path}/service/dfx/src/dfx_hisysevent.cpp",
    "${mmi_path}/service/display_state_manager/src/display_event_monitor.cpp",
    "${mmi_path}/service/subscriber/src/key_shortcut_manager.cpp",
    "subscriber/test/src/key_shortcut_manager_test.cpp",
    "subscriber/test/src/timer_manager.cpp",
  ]

  if (input_feature_key_pressed_handler) {
    sources += [ "subscriber/test/src/key_monitor_manager_test.cpp" ]
  }

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]
  configs = [ "${mmi_path}/service/filter:mmi_event_filter_config" ]

  deps = [
    "${mmi_path}/intention/scheduler/component_manager:mmi_component_manager",
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
    "${mmi_path}/util:mmi_json_parser",
    "${mmi_path}/frameworks/proxy:libmmi-common",
  ]

  external_deps = [
    "ability_runtime:ability_manager",
    "ability_runtime:app_manager",
    "cJSON:cjson",
    "c_utils:utils",
    "config_policy:configpolicy_util",
    "data_share:datashare_consumer",
    "drivers_interface_display:libdisplay_composer_hdi_impl_1.2",
    "drivers_interface_display:libdisplay_composer_proxy_1.0",
    "eventhandler:libeventhandler",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:libcomposer",
    "graphic_2d:librender_service_base",
    "graphic_2d:librender_service_client",
    "graphic_2d:window_animation",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "ipc:ipc_core",
    "ipc:ipc_single",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "window_manager:libdm_lite",
    "window_manager:libwm_lite",
  ]

  if (enable_player_framework) {
    external_deps += [ "player_framework:media_client" ]
  }
}

ohos_unittest("TimerManagerTest") {
  module_out_path = module_output_path

  include_dirs = [ "${mmi_path}/service/timer_manager/include" ]

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "timer_manager/test/timer_manager_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "cJSON:cjson",
    "c_utils:utilsbase",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "hilog:libhilog",
    "hilog:libhilog_base",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
  ]
}

ohos_unittest("InputDisplayBindHelperTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./ipc_blocklist.txt"
  }

  sources = [ "window_manager/test/input_display_bind_helper_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/test/facility/mock:mmi_mock_sources",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "ability_runtime:dataobs_manager",
    "cJSON:cjson",
    "c_utils:utils",
    "drivers_interface_display:libdisplay_composer_hdi_impl_1.2",
    "drivers_interface_display:libdisplay_composer_proxy_1.0",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "libinput:libinput-third-mmi",
    "window_manager:libwm",
    "window_manager:libwsutils",
  ]
}

ohos_unittest("KnuckleGlowPointTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [ "window_manager/test/knuckle_glow_point_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-knuckle",
    "${mmi_path}/test/facility/mock:mmi_mock_sources",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "ability_runtime:dataobs_manager",
    "cJSON:cjson",
    "c_utils:utils",
    "drivers_interface_display:libdisplay_composer_hdi_impl_1.2",
    "drivers_interface_display:libdisplay_composer_proxy_1.0",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_base",
    "graphic_2d:librender_service_client",
    "graphic_2d:window_animation",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "window_manager:libwm",
    "window_manager:libwsutils",
  ]
}

ohos_unittest("KnuckleDivergentPointTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./ipc_blocklist.txt"
  }

  sources = [ "window_manager/test/knuckle_divergent_point_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-knuckle",
    "${mmi_path}/test/facility/mock:mmi_mock_sources",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "ability_runtime:dataobs_manager",
    "cJSON:cjson",
    "c_utils:utils",
    "drivers_interface_display:libdisplay_composer_hdi_impl_1.2",
    "drivers_interface_display:libdisplay_composer_proxy_1.0",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_base",
    "graphic_2d:librender_service_client",
    "graphic_2d:window_animation",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "window_manager:libwm",
    "window_manager:libwsutils",
  ]
}

ohos_unittest("KnuckleGlowTraceSystemTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [ "window_manager/test/knuckle_glow_trace_system_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-knuckle",
    "${mmi_path}/test/facility/mock:mmi_mock_sources",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "ability_runtime:dataobs_manager",
    "cJSON:cjson",
    "c_utils:utils",
    "drivers_interface_display:libdisplay_composer_hdi_impl_1.2",
    "drivers_interface_display:libdisplay_composer_proxy_1.0",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_base",
    "graphic_2d:librender_service_client",
    "graphic_2d:window_animation",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "window_manager:libwm",
    "window_manager:libwsutils",
  ]
}

ohos_unittest("PointerDrawingManagerTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
    "${mmi_path}/common/anco/comm:mmi_anco_channel_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  cflags_cc = [ "-Wno-inconsistent-missing-override" ]

  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./ipc_blocklist.txt"
  }

  include_dirs =
      [ "${mmi_path}/service/hardware_cursor_pointer_manager/include" ]
  sources = [ "window_manager/test/pointer_drawing_manager_test.cpp" ]

  deps = [
    "${mmi_path}/frameworks/proxy:libmmi-common",
    "${mmi_path}/service:libcursor_drawing_adapter",
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/test/facility/mock:mmi_mock_sources",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "ability_runtime:dataobs_manager",
    "cJSON:cjson",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_consumer",
    "drivers_interface_display:libdisplay_composer_hdi_impl_1.2",
    "drivers_interface_display:libdisplay_composer_proxy_1.0",
    "eventhandler:libeventhandler",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:libcomposer",
    "graphic_2d:librender_service_base",
    "graphic_2d:librender_service_client",
    "graphic_2d:window_animation",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "window_manager:libdm_lite",
    "window_manager:libwm",
    "window_manager:libwsutils",
  ]
}

ohos_unittest("PointerDrawingManagerExTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  cflags_cc = [ "-Wno-inconsistent-missing-override" ]

  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./ipc_blocklist.txt"
  }

  include_dirs =
      [ "${mmi_path}/service/hardware_cursor_pointer_manager/include" ]
  sources = [ "window_manager/test/pointer_drawing_manager_ex_test.cpp" ]

  deps = [
    "${mmi_path}/frameworks/proxy:libmmi-common",
    "${mmi_path}/service:libcursor_drawing_adapter",
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/test/facility/mock:mmi_mock_sources",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "ability_runtime:dataobs_manager",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_consumer",
    "drivers_interface_display:libdisplay_composer_hdi_impl_1.2",
    "drivers_interface_display:libdisplay_composer_proxy_1.0",
    "eventhandler:libeventhandler",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:libcomposer",
    "graphic_2d:librender_service_base",
    "graphic_2d:librender_service_client",
    "graphic_2d:window_animation",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "window_manager:libdm_lite",
    "window_manager:libwm",
    "window_manager:libwsutils",
  ]
}

ohos_unittest("PointerDrawingManagerSupTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  cflags_cc = [ "-Wno-inconsistent-missing-override" ]

  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./ipc_blocklist.txt"
  }

  include_dirs =
      [ "${mmi_path}/service/hardware_cursor_pointer_manager/include" ]
  sources = [ "window_manager/test/pointer_drawing_manager_sup_test.cpp" ]

  deps = [
    "${mmi_path}/frameworks/proxy:libmmi-common",
    "${mmi_path}/service:libcursor_drawing_adapter",
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/test/facility/mock:mmi_mock_sources",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "ability_runtime:dataobs_manager",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_consumer",
    "drivers_interface_display:libdisplay_composer_hdi_impl_1.2",
    "drivers_interface_display:libdisplay_composer_proxy_1.0",
    "eventhandler:libeventhandler",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:libcomposer",
    "graphic_2d:librender_service_base",
    "graphic_2d:librender_service_client",
    "graphic_2d:window_animation",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "window_manager:libdm_lite",
    "window_manager:libwm",
    "window_manager:libwmutil",
    "window_manager:libwsutils",
  ]
}

ohos_unittest("TouchDrawingManagerTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./ipc_blocklist.txt"
  }

  include_dirs = [
    "${mmi_path}/service/hardware_cursor_pointer_manager/include",
    "${mmi_path}/util/json_parser/include"
  ]

  sources = [ "window_manager/test/touch_drawing_manager_test.cpp" ]

  if (input_feature_pointer_drawing) {
    sources += [
      "window_manager/test/pointer_renderer_test.cpp",
      "window_manager/test/screen_pointer_test.cpp",
    ]
  }

  deps = [
    "${mmi_path}/intention/scheduler/component_manager:mmi_component_manager",
    "${mmi_path}/service:libcursor_drawing_adapter",
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/test/facility/mock:mmi_mock_sources",
    "${mmi_path}/util:libmmi-util",
    "${mmi_path}/frameworks/proxy:libmmi-common",
  ]

  external_deps = [
    "ability_runtime:dataobs_manager",
    "cJSON:cjson",
    "c_utils:utils",
    "drivers_interface_display:libdisplay_composer_hdi_impl_1.2",
    "drivers_interface_display:libdisplay_composer_proxy_1.0",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_base",
    "graphic_2d:librender_service_client",
    "graphic_2d:window_animation",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "window_manager:libwm",
    "window_manager:libwmutil",
    "window_manager:libwsutils",
  ]
}

ohos_unittest("CursorDrawingComponentTest") {
  module_out_path = module_output_path

  configs = [ "${mmi_path}:coverage_flags" ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./ipc_blocklist.txt"
  }

  include_dirs = [
    "${mmi_path}/interfaces/native/innerkits/proxy/include",
    "${mmi_path}/service/delegate_task/include",
    "${mmi_path}/service/event_handler/include",
    "${mmi_path}/service/window_manager/include",
    "${mmi_path}/util/common/include",
  ]
  sources = [
    "${mmi_path}/service/window_manager/test/cursor_drawing_component_test.cpp",
  ]

  deps = [
    "${mmi_path}/service:libcursor_drawing_adapter",
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
    "${mmi_path}/frameworks/proxy:libmmi-common",
  ]

  external_deps = [
    "ability_runtime:dataobs_manager",
    "cJSON:cjson",
    "c_utils:utils",
    "drivers_interface_display:libdisplay_composer_hdi_impl_1.2",
    "drivers_interface_display:libdisplay_composer_proxy_1.0",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_base",
    "graphic_2d:librender_service_client",
    "graphic_2d:window_animation",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "window_manager:libwm",
    "window_manager:libwsutils",
  ]
}

ohos_unittest("KnuckleDrawingManagerTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./ipc_blocklist.txt"
  }

  sources = [ "window_manager/test/knuckle_drawing_manager_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-knuckle",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utils",
    "data_share:datashare_consumer",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_base",
    "graphic_2d:librender_service_client",
    "graphic_2d:window_animation",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "window_manager:libwm",
    "window_manager:libwsutils",
  ]
}

ohos_unittest("KnuckleDynamicDrawingManagerTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./ipc_blocklist.txt"
  }

  sources = [ "window_manager/test/knuckle_dynamic_drawing_manager_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-knuckle",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utils",
    "data_share:datashare_consumer",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_base",
    "graphic_2d:librender_service_client",
    "graphic_2d:window_animation",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "window_manager:libwm",
    "window_manager:libwsutils",
  ]
}

ohos_unittest("InputWindowsManagerTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
    "${mmi_path}/service/filter:mmi_event_filter_config",
    "${mmi_path}/common/anco/comm:mmi_anco_channel_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  include_dirs = [
    "hardware_cursor_pointer_manager/include",
    "${mmi_path}/service/event_handler/include",
  ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./ipc_blocklist.txt"
  }

  sources = [
    "window_manager/test/input_windows_manager_test.cpp",
    "window_manager/test/mock_input_windows_manager.cpp",
  ]

  deps = [
    "${mmi_path}/service:libcursor_drawing_adapter",
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
    "${mmi_path}/frameworks/proxy:libmmi-common",
    "${mmi_path}/util:mmi_json_parser",
  ]

  external_deps = [
    "ability_runtime:dataobs_manager",
    "cJSON:cjson",
    "c_utils:utilsbase",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_consumer",
    "drivers_interface_display:libdisplay_composer_hdi_impl_1.2",
    "drivers_interface_display:libdisplay_composer_proxy_1.0",
    "eventhandler:libeventhandler",
    "googletest:gmock_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:libcomposer",
    "graphic_2d:librender_service_base",
    "graphic_2d:librender_service_client",
    "graphic_2d:window_animation",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "window_manager:libdm_lite",
    "window_manager:libwm",
    "window_manager:libwsutils",
  ]
}

ohos_unittest("InputWindowsManagerOneTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    "${mmi_path}/service/filter:mmi_event_filter_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  include_dirs = [
    "${mmi_path}/common/anco/comm/include",
    "${mmi_path}/interfaces/native/innerkits/proxy/include",
    "${mmi_path}/service/connect_manager/include",
    "${mmi_path}/service/delegate_task/include",
    "${mmi_path}/service/device_config/include",
    "${mmi_path}/service/device_manager/include",
    "${mmi_path}/service/event_dispatch/include",
    "${mmi_path}/service/event_handler/include",
    "${mmi_path}/service/event_handler/include",
    "${mmi_path}/service/filter/include",
    "${mmi_path}/service/fingersense_wrapper/include",
    "${mmi_path}/service/hardware_cursor_pointer_manager/include",
    "${mmi_path}/service/interceptor/include",
    "${mmi_path}/service/key_command/include",
    "${mmi_path}/service/key_event_normalize/include",
    "${mmi_path}/service/module_loader/include",
    "${mmi_path}/service/monitor/include",
    "${mmi_path}/service/event_hook/include",
    "${mmi_path}/service/mouse_event_normalize/include",
    "${mmi_path}/service/nap_process/include",
    "${mmi_path}/service/subscriber/include",
    "${mmi_path}/service/timer_manager/include",
    "${mmi_path}/service/touch_event_normalize/include",
    "${mmi_path}/service/window_manager/include",
    "${mmi_path}/test/facility/libinput_interface/include",
    "${mmi_path}/util/common/include",
    "${mmi_path}/service/event_hook/include",
    "${mmi_path}/service/event_hook/include/hook",
    "${mmi_path}/service/event_hook/include/checker",
    "window_manager/test",
  ]

  if (input_feature_joystick) {
    include_dirs += [ "${mmi_path}/service/joystick/include" ]
  }

  sources = [ "window_manager/test/input_windows_manager_one_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
    "${mmi_path}/frameworks/proxy:libmmi-common",
  ]

  external_deps = [
    "ability_runtime:dataobs_manager",
    "cJSON:cjson",
    "c_utils:utilsbase",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_consumer",
    "drivers_interface_display:libdisplay_composer_hdi_impl_1.2",
    "drivers_interface_display:libdisplay_composer_proxy_1.0",
    "eventhandler:libeventhandler",
    "googletest:gmock_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:libcomposer",
    "graphic_2d:librender_service_base",
    "graphic_2d:librender_service_client",
    "graphic_2d:window_animation",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "window_manager:libdm_lite",
    "window_manager:libwm",
    "window_manager:libwsutils",
  ]
}

ohos_unittest("InputWindowsManagerEXTest") {
  module_out_path = module_output_path

  include_dirs = [
    "window_manager/test",
    "${mmi_path}/libudev/include",
    "${mmi_path}/common/anco/comm/include",
    "${mmi_path}/service/hardware_cursor_pointer_manager/include",
  ]

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
    "${mmi_path}/service/filter:mmi_event_filter_config",
    "${mmi_path}/common/anco/comm:mmi_anco_channel_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./ipc_blocklist.txt"
  }

  sources = [
    "window_manager/src/input_windows_manager.cpp",
    "window_manager/test/input_windows_manager_ex_test.cpp",
    "window_manager/test/mock.cpp",
  ]

  deps = [
    "${mmi_path}/intention/scheduler/component_manager:mmi_component_manager",
    "${mmi_path}/service:libcursor_drawing_adapter",
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/test/facility/libinput_interface:libinput_interface_sources",
    "${mmi_path}/util:libmmi-util",
    "${mmi_path}/frameworks/proxy:libmmi-common",
  ]

  if (defined(use_rosen_drawing) && use_rosen_drawing) {
    defines += [ "USE_ROSEN_DRAWING" ]
  }

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_manager",
    "ability_runtime:abilitykit_native",
    "ability_runtime:app_manager",
    "ability_runtime:dataobs_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libtokenid_sdk",
    "cJSON:cjson",
    "common_event_service:cesfwk_innerkits",
    "config_policy:configpolicy_util",
    "data_share:datashare_consumer",
    "drivers_interface_display:libdisplay_composer_hdi_impl_1.2",
    "drivers_interface_display:libdisplay_composer_proxy_1.0",
    "eventhandler:libeventhandler",
    "faultloggerd:libbacktrace_local",
    "ffrt:libffrt",
    "googletest:gmock_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:libcomposer",
    "graphic_2d:librender_service_base",
    "graphic_2d:librender_service_client",
    "graphic_2d:window_animation",
    "hdf_core:libhdi",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "image_framework:image_native",
    "init:libbeget_proxy",
    "init:libbegetutil",
    "ipc:ipc_single",
    "napi:ace_napi",
    "preferences:native_preferences",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "window_manager:libdm_lite",
    "window_manager:libwm_lite",
    "window_manager:libwsutils",
  ]

  if (hitrace_enabled) {
    external_deps += [ "hitrace:hitrace_meter" ]
  }

  if (call_manager_service_enabled) {
    external_deps += [ "call_manager:tel_call_manager_api" ]
  }
}

ohos_unittest("AccountManagerTest") {
  module_out_path = module_output_path

  include_dirs = [
    "${mmi_path}/service/account_manager/include",
    "${mmi_path}/service/device_state_manager/include",
    "${mmi_path}/service/key_command/include",
    "${mmi_path}/util/common/include",
  ]

  configs = [
    "${mmi_path}:coverage_flags",
    "${mmi_path}/common/anco/comm:mmi_anco_channel_config",
    "${mmi_path}/service/filter:mmi_event_filter_config",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources =
      [ "${mmi_path}/service/account_manager/test/account_manager_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "ability_runtime:wantagent_innerkits",
    "cJSON:cjson",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_consumer",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_base",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "window_manager:libwm",
  ]

  if (call_manager_service_enabled) {
    external_deps += [ "call_manager:tel_call_manager_api" ]
  }
}

ohos_unittest("SubscriberTest") {
  module_out_path = module_output_path

  include_dirs = [
    "${mmi_path}/service/subscriber/include",
    "${mmi_service_path}/device_state_manager/include",
  ]

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
    "${mmi_path}/service/filter:mmi_event_filter_config",
    "${mmi_path}/common/anco/comm:mmi_anco_channel_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [
    "module_loader/src/input_screen_capture_agent.cpp",
    "subscriber/test/key_subscriber_handler_test.cpp",
    "subscriber/test/tablet_subscriber_handler_test.cpp",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
    "${mmi_path}/frameworks/proxy:libmmi-common",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:wantagent_innerkits",
    "cJSON:cjson",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_consumer",
    "graphic_2d:2d_graphics",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
  ]

  if (call_manager_service_enabled) {
    external_deps += [ "call_manager:tel_call_manager_api" ]
  }

  if (input_feature_switch) {
    external_deps += [
      "graphic_2d:2d_graphics",
      "graphic_2d:librender_service_client",
      "window_manager:libwm",
    ]
  }
}

ohos_unittest("KeyGestureManagerEXTest") {
  module_out_path = module_output_path

  include_dirs = [
    "${mmi_path}/libudev/include",
    "${mmi_path}/service/account_manager/include",
    "${mmi_path}/service/app_state_manager/include",
    "${mmi_path}/service/display_state_manager/include",
    "${mmi_path}/service/fingersense_wrapper/include",
    "${mmi_path}/service/key_command/include",
    "${mmi_path}/service/key_event_normalize/include",
    "${mmi_path}/service/subscriber/include",
    "${mmi_path}/service/subscriber/test/include",
    "${mmi_path}/service/timer_manager/include",
    "${mmi_path}/service/window_manager/include",
    "${mmi_path}/test/facility/libinput_interface/include",
    "${mmi_service_path}/connect_manager/include",
    "${mmi_service_path}/module_loader/include",
  ]

  sources = [
    "${mmi_path}/service/app_state_manager/src/app_state_observer.cpp",
    "subscriber/src/key_gesture_manager.cpp",
    "subscriber/test/key_gesture_manager_ex_test.cpp",
    "subscriber/test/src/timer_manager.cpp",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  deps = [
    "${mmi_path}/frameworks/proxy:libmmi-client",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "ability_runtime:dataobs_manager",
    "common_event_service:cesfwk_innerkits",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
  ]

  if (input_feature_switch) {
    external_deps += [
      "graphic_2d:2d_graphics",
      "graphic_2d:librender_service_client",
    ]
  }
}

ohos_unittest("NapProcessTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
    "${mmi_path}/service/filter:mmi_event_filter_config",
    "${mmi_path}/common/anco/comm:mmi_anco_channel_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "nap_process/test/nap_process_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utils",
    "graphic_2d:2d_graphics",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_core",
    "ipc:ipc_single",
  ]
}

ohos_unittest("MonitorTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
    "${mmi_path}/service/filter:mmi_event_filter_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [
    "monitor/test/event_monitor_handler_test.cpp",
    "monitor/test/event_pre_monitor_handler_test.cpp",
    "monitor/test/gesture_monitor_handler_test.cpp",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utils",
    "data_share:datashare_consumer",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "window_manager:libdm_lite",
    "window_manager:libwm",
  ]
}

ohos_unittest("ModuleLoaderTest") {
  module_out_path = module_output_path

  include_dirs = [
    "${mmi_path}/service/module_loader/include",
    "${mmi_path}/test/facility/libinput_interface/include",
    "${mmi_path}/util/common/include",
    "${mmi_service_path}/product_property_config/include",
    "${mmi_service_path}/custom_config_parser/include",
  ]

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
    "${mmi_path}/service/filter:mmi_event_filter_config",
    "${mmi_path}/service/connect_manager:mmi_connect_manager_config",
    "${mmi_path}/common/anco/comm:mmi_anco_channel_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [
    "module_loader/src/input_screen_capture_agent.cpp",
    "module_loader/test/input_screen_capture_agent_test.cpp",
    "module_loader/test/mmi_service_test.cpp",
    "module_loader/test/multimodal_input_plugin_manager_test.cpp",
    "module_loader/test/multimodal_input_preferences_manager_test.cpp",
    "module_loader/test/uds_server_test.cpp",
    "module_loader/test/watchdog_task_test.cpp",
  ]

  deps = [
    "${mmi_path}/frameworks/proxy:libmmi-common",
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/test/facility/libinput_wrapper:libinput_wrapper_sources",
    "${mmi_path}/test/facility/virtual_device:virtual_device_sources",
    "${mmi_path}/util:libmmi-util",
    "${mmi_path}/test/facility/mock:mmi_mock_sources",
  ]

  external_deps = [
    "ability_runtime:app_manager",
    "cJSON:cjson",
    "c_utils:utils",
    "data_share:datashare_consumer",
    "googletest:gtest_main",
    "googletest:gmock_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_base",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "window_manager:libwm",
  ]

  if (security_component_enable) {
    external_deps += [ "security_component_manager:libsecurity_component_sdk" ]
  }
}

ohos_unittest("KeyEventNormalizeTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "key_event_normalize/test/key_event_normalize_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/test/facility/libinput_wrapper:libinput_wrapper_sources",
    "${mmi_path}/test/facility/virtual_device:virtual_device_sources",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utilsbase",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "window_manager:libwm",
  ]
}

ohos_unittest("KeyEventNormalizeWithMockTest") {
  module_out_path = module_output_path

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./ipc_blocklist.txt"
  }
  
  include_dirs = [
    "${mmi_path}/frameworks/proxy/event_handler/include",
    "${mmi_path}/interfaces/native/innerkits/common/include",
    "${mmi_path}/interfaces/native/innerkits/event/include",
    "${mmi_path}/interfaces/native/innerkits/proxy/include",
    "${mmi_path}/test/facility/mock/include",
    "${mmi_path}/test/unittest/common/include",
    "${mmi_path}/util/common/include",
    "${mmi_path}/util/network/include",
    "${mmi_path}/util/napi/include",
    "${mmi_path}/util/socket/include",
    "${mmi_service_path}/account_manager/include",
    "${mmi_service_path}/app_state_manager/include",
    "${mmi_service_path}/connect_manager/include",
    "${mmi_service_path}/crown_transform_processor/include",
    "${mmi_service_path}/delegate_task/include",
    "${mmi_service_path}/device_config/include",
    "${mmi_service_path}/device_manager/include",
    "${mmi_service_path}/device_state_manager/include",
    "${mmi_service_path}/dfx/include",
    "${mmi_service_path}/display_state_manager/include",
    "${mmi_service_path}/event_dispatch/include",
    "${mmi_service_path}/event_dump/include",
    "${mmi_service_path}/event_handler/include",
    "${mmi_service_path}/event_resample/include",
    "${mmi_service_path}/filter/include",
    "${mmi_service_path}/fingersense_wrapper/include",
    "${mmi_service_path}/gesturesense_wrapper/include",
    "${mmi_service_path}/interceptor/include",
    "${mmi_service_path}/joystick/include",
    "${mmi_service_path}/key_command/include",
    "${mmi_service_path}/key_event_normalize/include",
    "${mmi_service_path}/libinput_adapter/include",
    "${mmi_service_path}/message_handle/include",
    "${mmi_service_path}/module_loader/include",
    "${mmi_service_path}/monitor/include",
    "${mmi_service_path}/mouse_event_normalize/include",
    "${mmi_service_path}/nap_process/include",
    "${mmi_service_path}/permission_helper/include",
    "${mmi_service_path}/subscriber/include",
    "${mmi_service_path}/timer_manager/include",
    "${mmi_service_path}/touch_event_normalize/include",
    "${mmi_service_path}/window_manager/include",
  ]

  if (input_ext_feature_anco) {
    include_dirs += [
      "${mmi_path}/common/anco/comm/include",
    ]
  }

  configs = [
    "${mmi_path}:coverage_flags",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "key_event_normalize/test/key_event_normalize_test_with_mock.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
    "${mmi_path}/test/facility/mock:mmi_mock_sources",
  ]

  if (input_ext_feature_anco) {
    deps += [ "${mmi_path}/common/anco/comm:mmi_anco_channel_proxy" ]
  }

  external_deps = [
    "cJSON:cjson",
    "c_utils:utilsbase",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "libinput:libinput-third-mmi",
  ]
}

ohos_unittest("KeyUnicodeTransformationTest") {
  module_out_path = module_output_path
  include_dirs = [
    "${mmi_path}/service/key_event_normalize/include",
    "${mmi_path}/service/event_handler/include",
  ]

  configs = [ "${mmi_path}:coverage_flags" ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "key_event_normalize/test/key_unicode_transformation_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/test/facility/libinput_wrapper:libinput_wrapper_sources",
    "${mmi_path}/test/facility/virtual_device:virtual_device_sources",
    "${mmi_path}/util:libmmi-util",
    "${mmi_path}/frameworks/proxy:libmmi-common",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utilsbase",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "window_manager:libwm",
  ]
}

ohos_unittest("KeyEventValueTransformationTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
    "${mmi_path}/service/filter:mmi_event_filter_config",
    "${mmi_path}/common/anco/comm:mmi_anco_channel_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "event_handler/test/key_event_value_transformation_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "c_utils:utilsbase",
    "hilog:libhilog",
    "hilog:libhilog_base",
  ]
}

ohos_unittest("KeyCommandTest") {
  module_out_path = module_output_path

  include_dirs = [
    "${mmi_path}/service/subscriber/include",
    "${mmi_path}/test/unittest/common/include",
    "${mmi_service_path}/product_property_config/include",
  ]

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
    "${mmi_path}/service/filter:mmi_event_filter_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [
    "key_command/test/ability_manager_client_stub.cpp",
    "key_command/test/key_command_handler_util_test.cpp",
    "key_command/test/pull_throw_subscriber_handler_test.cpp",
    "key_command/test/setting_datashare_test.cpp",
    "subscriber/src/key_shortcut_manager.cpp",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
    "${mmi_path}/frameworks/proxy:libmmi-common",
    "${mmi_path}/util:mmi_json_parser",
  ]

  external_deps = [
    "ability_runtime:app_manager",
    "cJSON:cjson",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "config_policy:configpolicy_util",
    "data_share:datashare_consumer",
    "eventhandler:libeventhandler",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_base",
    "graphic_2d:librender_service_client",
    "graphic_2d:window_animation",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "samgr:samgr_proxy",
    "window_manager:libwm",
  ]
}

ohos_unittest("LongPressSubscribeHandlerTest") {
  module_out_path = module_output_path

  include_dirs = [
    "account_manager/include",
    "app_state_manager/include",
    "device_config/include",
    "device_manager/include",
    "device_scalability/include",
    "device_state_manager/include",
    "delegate_task/include",
    "display_state_manager/include",
    "event_dispatch/include",
    "key_event_normalize/include",
    "event_handler/include",
    "event_dump/include",
    "fingersense_wrapper/include",
    "gesturesense_wrapper/include",
    "monitor/include",
    "interceptor/include",
    "dfx/include",
    "libinput_adapter/include",
    "message_handle/include",
    "module_loader/include",
    "hardware_cursor_pointer_manager/include",
    "window_manager/include",
    "touch_event_normalize/include",
    "key_command/include",
    "subscriber/include",
    "timer_manager/include",
    "permission_helper/include",
    "infrared_emitter/include",
    "${mmi_service_path}/connect_manager/include",
    "${mmi_service_path}/device_state_manager/include",
    "${mmi_service_path}/filter/include",
    "${mmi_service_path}/module_loader/include",
    "${mmi_service_path}/hardware_cursor_pointer_manager/include",
    "${mmi_service_path}/nap_process/include",
    "${mmi_service_path}/event_resample/include",
    "${mmi_path}/interfaces/native/innerkits/proxy/include",
    "${mmi_path}/interfaces/native/innerkits/event/include",
    "mouse_event_normalize/include",
    "crown_transform_processor/include",
    "${mmi_path}/interfaces/native/innerkits/common/include",
    "${mmi_path}/util/common/include",
    "${mmi_path}/util/socket/include",
    "${mmi_path}/util/network/include",
    "${mmi_path}/frameworks/proxy/event_handler/include",
    "${mmi_path}/util/napi/include",
    "${mmi_path}/common/anco/comm/include",
    "${mmi_path}/test/unittest/common/include",
    "joystick/include",
    "${mmi_path}/service/event_hook/include",
    "${mmi_path}/service/event_hook/include/hook",
    "${mmi_path}/service/event_hook/include/checker",
  ]

  configs = [
    "${mmi_path}:coverage_flags",
    "${mmi_path}/service/filter:mmi_event_filter_config",
    "${mmi_path}/common/anco/comm:mmi_anco_channel_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "key_command/test/long_press_subscriber_handler_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
    "${mmi_path}/util:mmi_json_parser",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utils",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:libcomposer",
    "graphic_2d:librender_service_base",
    "graphic_2d:librender_service_client",
    "graphic_2d:window_animation",
    "hilog:libhilog",
    "image_framework:image_native",
    "ipc:ipc_single",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "window_manager:libwm_lite",
  ]
}

ohos_unittest("StylusKeyTest") {
  module_out_path = module_output_path

  include_dirs = [ "${mmi_path}/test/unittest/common/include" ]

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "key_command/test/stylus_key_handler_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utils",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "hilog:libhilog",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
  ]
}

ohos_unittest("InfraredEmitterTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "infrared_emitter/test/infrared_emitter_controller_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utilsbase",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "hdf_core:libhdi",
    "hilog:libhilog",
    "hilog:libhilog_base",
    "init:libbegetutil",
    "ipc:ipc_core",
  ]
}

ohos_unittest("InfraredEmitterEXTest") {
  module_out_path = module_output_path

  include_dirs = [
    "infrared_emitter/include",
    "infrared_emitter/test",
  ]

  configs = [ "${mmi_path}:coverage_flags" ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  cflags_cc = [ "-Wno-inconsistent-missing-override" ]

  sources = [
    "infrared_emitter/src/infrared_emitter_controller.cpp",
    "infrared_emitter/test/infrared_emitter_controller_ex_test.cpp",
    "infrared_emitter/test/mock.cpp",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utilsbase",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "hdf_core:libhdi",
    "hilog:libhilog",
    "hilog:libhilog_base",
    "init:libbegetutil",
    "ipc:ipc_core",
  ]
}

ohos_unittest("InterceptorTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "interceptor/test/event_interceptor_handler_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utilsbase",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "hilog:libhilog",
    "hilog:libhilog_base",
    "init:libbegetutil",
    "ipc:ipc_core",
  ]
}

ohos_unittest("InterceptorExTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [
    "interceptor/src/event_interceptor_handler.cpp",
    "interceptor/test/event_interceptor_handler_ex_test.cpp",
    "interceptor/test/mock.cpp",
  ]

  deps = [ "${mmi_path}/util:libmmi-util" ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utilsbase",
    "data_share:datashare_consumer",
    "googletest:gmock_main",
    "graphic_2d:2d_graphics",
    "hilog:libhilog",
    "hilog:libhilog_base",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
  ]
}

ohos_unittest("KeyAutoRepeatExTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [
    "event_handler/test/key_auto_repeat_ex_test.cpp",
    "event_handler/test/mock.cpp",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/test/facility/mock:mmi_mock_sources",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utils",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "window_manager:libdm_lite",
  ]
}

ohos_unittest("EventHandlerTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
    "${mmi_path}/service/filter:mmi_event_filter_config",
    "${mmi_path}/common/anco/comm:mmi_anco_channel_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  cflags_cc = [ "-Wno-string-conversion" ]

  sources = [
    "event_handler/test/anr_manager_test.cpp",
    "event_handler/test/event_normalize_handler_test.cpp",
    "event_handler/test/key_auto_repeat_test.cpp",
    "event_handler/test/key_event_value_transformation_test.cpp",
    "event_handler/test/touchpad_settings_handler_test.cpp",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/test/facility/libinput_wrapper:libinput_wrapper_sources",
    "${mmi_path}/test/facility/virtual_device:virtual_device_sources",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utils",
    "data_share:datashare_consumer",
    "googletest:gmock_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "window_manager:libwm",
  ]
}

ohos_unittest("InputEventHandlerTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    "${mmi_path}/service/filter:mmi_event_filter_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  cflags_cc = [ "-Wno-string-conversion" ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./ipc_blocklist.txt"
  }

  include_dirs = [
    "${mmi_path}/common/anco/comm/include",
    "${mmi_path}/interfaces/native/innerkits/proxy/include",
    "${mmi_path}/service/connect_manager/include",
    "${mmi_path}/service/delegate_task/include",
    "${mmi_path}/service/device_config/include",
    "${mmi_path}/service/device_manager/include",
    "${mmi_path}/service/event_dispatch/include",
    "${mmi_path}/service/event_handler/include",
    "${mmi_path}/service/filter/include",
    "${mmi_path}/service/interceptor/include",
    "${mmi_path}/service/key_command/include",
    "${mmi_path}/service/key_event_normalize/include",
    "${mmi_path}/service/module_loader/include",
    "${mmi_path}/service/monitor/include",
    "${mmi_path}/service/event_hook/include",
    "${mmi_path}/service/mouse_event_normalize/include",
    "${mmi_path}/service/nap_process/include",
    "${mmi_path}/service/subscriber/include",
    "${mmi_path}/service/timer_manager/include",
    "${mmi_path}/service/touch_event_normalize/include",
    "${mmi_path}/service/window_manager/include",
    "${mmi_path}/test/facility/mock/include",
    "${mmi_path}/util/common/include",
    "${mmi_path}/service/event_hook/include",
    "${mmi_path}/service/event_hook/include/hook",
    "${mmi_path}/service/event_hook/include/checker",
  ]

  if (input_feature_joystick) {
    include_dirs += [ "${mmi_path}/service/joystick/include" ]
  }

  sources = [ "event_handler/test/input_event_handler_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/test/facility/libinput_interface:libinput_interface_sources",
    "${mmi_path}/test/facility/libinput_wrapper:libinput_wrapper_sources",
    "${mmi_path}/test/facility/virtual_device:virtual_device_sources",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utils",
    "data_share:datashare_consumer",
    "googletest:gmock_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "window_manager:libwm",
  ]
}

ohos_unittest("EventNormalizeHandlerTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
    "${mmi_path}/service/filter:mmi_event_filter_config",
    "${mmi_path}/common/anco/comm:mmi_anco_channel_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  cflags_cc = [ "-Wno-string-conversion" ]

  sources = [ "event_handler/test/event_normalize_handler_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/test/facility/libinput_wrapper:libinput_wrapper_sources",
    "${mmi_path}/test/facility/virtual_device:virtual_device_sources",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utils",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "window_manager:libwm",
  ]
}

ohos_unittest("EventHandlerEXTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
    "${mmi_path}/service/filter:mmi_event_filter_config",
    "${mmi_path}/service/connect_manager:mmi_connect_manager_config",
    "${mmi_path}/common/anco/comm:mmi_anco_channel_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [
    "event_handler/src/event_normalize_handler.cpp",
    "event_handler/test/event_normalize_handler_ex_test.cpp",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
    "${mmi_path}/frameworks/proxy:libmmi-common",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_consumer",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "image_framework:image_native",
    "init:libbegetutil",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "samgr:samgr_proxy",
    "window_manager:libwm",
  ]
  if (resource_schedule_service_enabled) {
    external_deps += [ "resource_schedule_service:ressched_client" ]
  }
}

ohos_unittest("EventDispatchTest") {
  module_out_path = module_output_path

  defines += [ "OHOS_BUILD_ENABLE_ONE_HAND_MODE" ]

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
    "${mmi_path}/service/filter:mmi_event_filter_config",
    "${mmi_path}/service/connect_manager:mmi_connect_manager_config",
    "${mmi_path}/common/anco/comm:mmi_anco_channel_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = true
    blocklist = "./ipc_blocklist.txt"
  }

  include_dirs = [
    "${mmi_path}/service/connect_manager/include",
    "${mmi_path}/service/delegate_task/include",
    "${mmi_path}/service/device_config/include",
    "${mmi_path}/service/device_manager/include",
    "${mmi_path}/service/device_state_manager/include",
    "${mmi_path}/service/dfx/include",
    "${mmi_path}/service/display_state_manager/include",
    "${mmi_path}/service/event_dispatch/include",
    "${mmi_path}/service/event_handler/include",
    "${mmi_path}/service/fingersense_wrapper/include",
    "${mmi_path}/service/gesturesense_wrapper/include",
    "${mmi_path}/service/interceptor/include",
    "${mmi_path}/service/key_command/include",
    "${mmi_path}/service/key_event_normalize/include",
    "${mmi_path}/service/module_loader/include",
    "${mmi_path}/service/product_property_config/include",
    "${mmi_path}/service/custom_config_parser/include",
    "${mmi_path}/util/json_parser/include",
    "dfx/include",
    "${mmi_path}/frameworks/proxy/event_handler/include",
    "${mmi_path}/frameworks/proxy/events/include",
    "${mmi_path}/util/common/include",
    "${target_gen_dir}",
    "${target_gen_dir}/connect_manager",
  ]

  sources = [
    "event_dispatch/test/event_dispatch_test.cpp",
    "event_dispatch/src/event_dispatch_handler.cpp",
  ]

  deps = [
    "${mmi_path}/frameworks/proxy:libmmi-client",
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "ability_runtime:app_manager",
    "ability_runtime:dataobs_manager",
    "ability_runtime:app_manager",
    "cJSON:cjson",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_consumer",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "hisysevent:libhisysevent",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "window_manager:libwm",
    "window_manager:libwsutils",
  ]
  if (security_component_enable) {
    external_deps += [ "security_component_manager:libsecurity_component_sdk" ]
  }
}

ohos_unittest("LibinputAdapterTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
    "${mmi_path}/service/filter:mmi_event_filter_config",
    "${mmi_path}/common/anco/comm:mmi_anco_channel_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "libinput_adapter/test/libinput_adapter_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utilsbase",
    "graphic_2d:2d_graphics",
    "hilog:libhilog",
    "hilog:libhilog_base",
    "libinput:libinput-third-mmi",
  ]
}

ohos_unittest("ServerMsgHandlerTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
    "${mmi_path}/service/filter:mmi_event_filter_config",
    "${mmi_path}/common/anco/comm:mmi_anco_channel_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [
    "message_handle/test/authorize_helper_test.cpp",
    "message_handle/test/client_death_handler_test.cpp",
    "message_handle/test/inject_notice_manager_test.cpp",
    "message_handle/test/server_msg_handler_test.cpp",
  ]

  deps = [
    "${mmi_path}/frameworks/proxy:libmmi-client",
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
    "${mmi_path}/frameworks/proxy:libmmi-common",
  ]

  external_deps = [
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:app_manager",
    "ability_runtime:dataobs_manager",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "c_utils:utils",
    "data_share:datashare_consumer",
    "ffrt:libffrt",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_single",
    "libinput:libinput-third-mmi",
    "napi:ace_napi",
    "preferences:native_preferences",
    "window_manager:libwm",
  ]

  if (security_component_enable) {
    external_deps += [ "security_component_manager:libsecurity_component_sdk" ]
  }
}

ohos_unittest("PermissionHelperTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "permission_helper/test/permission_helper_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "ability_runtime:dataobs_manager",
    "access_token:libaccesstoken_sdk",
    "cJSON:cjson",
    "c_utils:utils",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_single",
    "libinput:libinput-third-mmi",
  ]

  if (security_component_enable) {
    external_deps += [ "security_component_manager:libsecurity_component_sdk" ]
  }
}

ohos_unittest("DisplayStateManagerTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [
    "display_state_manager/test/display_event_monitor_test.cpp",
    "display_state_manager/test/mock.cpp",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "ability_base:want",
    "cJSON:cjson",
    "c_utils:utils",
    "c_utils:utilsbase",
    "common_event_service:cesfwk_core",
    "googletest:gmock_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "window_manager:libdm_lite",
    "window_manager:libwm",
  ]
}

ohos_unittest("DeviceManagerTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  cflags_cc = [ "-Wno-string-conversion" ]

  sources = [
    "device_manager/test/input_device_manager_test.cpp",
    "device_manager/test/pointer_device_manager_test.cpp",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utilsbase",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "hilog:libhilog",
    "hilog:libhilog_base",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "window_manager:libdm_lite",
  ]
}

ohos_unittest("DeviceManagerExTest") {
  module_out_path = module_output_path

  include_dirs = [
    "connect_manager/include",
    "delegate_task/include",
    "device_config/include",
    "device_manager/include",
    "dfx/include",
    "event_dispatch/include",
    "event_handler/include",
    "filter/include",
    "hardware_cursor_pointer_manager/include",
    "interceptor/include",
    "joystick/include",
    "key_command/include",
    "key_event_normalize/include",
    "module_loader/include",
    "monitor/include",
    "mouse_event_normalize/include",
    "nap_process/include",
    "subscriber/include",
    "timer_manager/include",
    "touch_event_normalize/include",
    "window_manager/include",
    "${mmi_path}/interfaces/native/innerkits/proxy/include",
    "${mmi_path}/util/json_parser/include",
    "${mmi_path}/service/event_hook/include",
    "${mmi_path}/service/event_hook/include/hook",
    "${mmi_path}/service/event_hook/include/checker",
  ]

  configs = [
    "${mmi_path}:coverage_flags",
    "${mmi_path}/service/filter:mmi_event_filter_config",
    "${mmi_path}/common/anco/comm:mmi_anco_channel_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  cflags_cc = [ "-Wno-string-conversion" ]

  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = true
    blocklist = "./ipc_blocklist.txt"
  }

  sources = [
    "device_manager/src/input_device_manager.cpp",
    "device_manager/test/input_device_manager_ex_test.cpp",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/test/facility/cursor_drawing_component_mock:cursor_drawing_component_mock",
    "${mmi_path}/test/facility/mock:mmi_mock_sources",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utilsbase",
    "drivers_interface_display:libdisplay_composer_hdi_impl_1.2",
    "drivers_interface_display:libdisplay_composer_proxy_1.0",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "hilog:libhilog_base",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "window_manager:libdm_lite",
  ]
}

ohos_unittest("DeviceConfigTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "device_config/test/device_config_file_parser_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "cJSON:cjson",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
  ]
}

ohos_unittest("DelegateTaskTest") {
  module_out_path = module_output_path
  include_dirs = [
    "${mmi_path}/util/napi",
    "${mmi_path}/util/napi/include",
  ]

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
    "${mmi_path}/service/filter:mmi_event_filter_config",
    "${mmi_path}/service/connect_manager:mmi_connect_manager_config",
    "${mmi_path}/common/anco/comm:mmi_anco_channel_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [
    "${mmi_path}/util/napi/src/key_event_napi.cpp",
    "${mmi_path}/util/napi/src/util_napi_value.cpp",
    "delegate_task/test/delegate_tasks_test.cpp",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utilsbase",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "hilog:libhilog",
    "hilog:libhilog_base",
    "init:libbegetutil",
    "napi:ace_napi",
  ]
}

ohos_unittest("ConnectManagerProxyEXTest") {
  module_out_path = module_output_path

  include_dirs = [
    "connect_manager/test",
    "${mmi_path}/common/anco/comm/include",
    "interfaces/native/innerkits/proxy/include",
  ]

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
    "${mmi_path}/service/filter:mmi_event_filter_config",
    "${mmi_path}/service/connect_manager:mmi_connect_manager_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = true
    blocklist = "./ipc_blocklist.txt"
  }

  sources = [
    "connect_manager/test/message_parcel_mock.cpp",
    "connect_manager/test/multimodal_input_connect_proxy_ex_test.cpp",
  ]

  deps = [
    "${mmi_path}/common/anco/comm:mmi_anco_channel_proxy",
    "${mmi_path}/frameworks/proxy:libmmi-client",
    "${mmi_path}/service/connect_manager:mmi_connect_manager_proxy",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "ability_runtime:app_manager",
    "access_token:libaccesstoken_sdk",
    "cJSON:cjson",
    "c_utils:utils",
    "c_utils:utilsbase",
    "googletest:gmock_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_single",
    "libinput:libinput-third-mmi",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "window_manager:libwm",
  ]

  if (security_component_enable) {
    external_deps += [ "security_component_manager:libsecurity_component_sdk" ]
  }
}

ohos_unittest("EventDumpTest") {
  module_out_path = module_output_path

  include_dirs = [
    "${mmi_path}/test/unittest/common/include",
    "${mmi_service_path}/product_property_config/include",
    "${mmi_service_path}/custom_config_parser/include"
  ]

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
    "${mmi_path}/service/filter:mmi_event_filter_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./ipc_blocklist.txt"
  }

  sources = [
    "event_dump/test/event_dump_test.cpp",
    "event_dump/test/event_statistic_test.cpp",
  ]

  deps = [
    "${mmi_path}/frameworks/proxy:libmmi-common",
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utils",
    "data_share:datashare_consumer",
    "eventhandler:libeventhandler",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "window_manager:libwm",
  ]
}

ohos_unittest("DeviceEventMonitorTest") {
  module_out_path = module_output_path

  include_dirs = [
    "${mmi_path}/service/device_state_manager/include",
    "${mmi_path}/test/unittest/common/include",
  ]

  configs = [ "${mmi_path}:coverage_flags" ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "device_state_manager/test/device_event_monitor_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:wantagent_innerkits",
    "cJSON:cjson",
    "c_utils:utilsbase",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_consumer",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "hilog:libhilog",
    "hilog:libhilog_base",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_single",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
  ]
}

ohos_unittest("DfxHisysEventTest") {
  module_out_path = module_output_path

  include_dirs = [ "${mmi_path}/test/unittest/common/include" ]

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [
    "dfx/test/dfx_hisysevent_device_test.cpp",
    "dfx/test/dfx_hisysevent_test.cpp",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utilsbase",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "hilog:libhilog",
    "hilog:libhilog_base",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "libinput:libinput-third-mmi",
  ]
}

ohos_unittest("JoystickTest") {
  module_out_path = module_output_path

  include_dirs = [
    "${mmi_path}/test/unittest/common/include",
    "${mmi_path}/test/facility/libinput_interface/include",
  ]

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
    "${mmi_path}/service/filter:mmi_event_filter_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [
    "joystick/test/joystick_event_normalize_test.cpp",
    "joystick/test/joystick_event_processor_test.cpp",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utilsbase",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "hilog:libhilog",
    "hilog:libhilog_base",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
  ]
}

ohos_unittest("KeymapMgrTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
    "${mmi_path}/service/filter:mmi_event_filter_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  include_dirs = [
    "${mmi_path}/service/key_command/include",
    "${mmi_path}/test/facility/libinput_interface/include",
    "${mmi_path}/libudev/include",
    "${mmi_path}/service/event_handler/include",
    "${mmi_path}/service/event_handler/test",
  ]

  sources = [
    "event_handler/src/key_map_manager.cpp",
    "event_handler/test/key_map_manager_mock.cpp",
    "event_handler/test/key_map_manager_test.cpp",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/test/facility/libinput_interface:libinput_interface_sources",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_manager",
    "ability_runtime:abilitykit_native",
    "ability_runtime:app_manager",
    "ability_runtime:dataobs_manager",
    "cJSON:cjson",
    "common_event_service:cesfwk_innerkits",
    "config_policy:configpolicy_util",
    "data_share:datashare_consumer",
    "googletest:gmock_main",
    "hilog:libhilog",
    "hilog:libhilog_base",
    "hisysevent:libhisysevent",
    "preferences:native_preferences",
  ]
}

ohos_unittest("KnuckleDrawingComponentTest") {
  module_out_path = module_output_path

  include_dirs = [
    "${mmi_path}/interfaces/native/innerkits/proxy/include",
    "${mmi_path}/interfaces/native/innerkits/event/include",
    "${mmi_service_path}/window_manager/include",
    "${mmi_path}/service/touch_event_normalize/include",
    "${mmi_path}/service/delegate_task/include",
    "${mmi_path}/service/event_handler/include",
    "${mmi_path}/service/module_loader/include",
    "${mmi_path}/util/common/include",
    "${mmi_path}/service/connect_manager/include",
    "${mmi_path}/service/key_command/include",
    "${mmi_path}/service/timer_manager/include",
  ]

  configs = [ "${mmi_path}:coverage_flags" ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./ipc_blocklist.txt"
  }

  sources = [ "window_manager/test/knuckle_drawing_component_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-knuckle",
    "${mmi_path}/service:libmmi-server",
  ]

  external_deps = [
    "c_utils:utils",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "graphic_2d:librender_service_base",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
  ]

  if (input_new_knuckle_dynamic_enabled) {
    defines += [ "OHOS_BUILD_ENABLE_NEW_KNUCKLE_DYNAMIC" ]
  }
}

ohos_unittest("KnuckleDrawingTest") {
  module_out_path = module_output_path

  include_dirs = [
    "${mmi_path}/interfaces/native/innerkits/proxy/include",
    "${mmi_path}/interfaces/native/innerkits/event/include",
    "${mmi_service_path}/window_manager/include",
    "${mmi_path}/service/touch_event_normalize/include",
    "${mmi_path}/service/delegate_task/include",
    "${mmi_path}/service/event_handler/include",
    "${mmi_path}/service/module_loader/include",
    "${mmi_path}/util/common/include",
    "${mmi_path}/service/connect_manager/include",
    "${mmi_path}/service/key_command/include",
    "${mmi_path}/service/timer_manager/include",
  ]

  configs = [ "${mmi_path}:coverage_flags" ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./ipc_blocklist.txt"
  }

  sources = [ "window_manager/test/knuckle_drawing_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-knuckle",
    "${mmi_path}/service:libmmi-server",
  ]

  external_deps = [
    "c_utils:utils",
    "data_share:datashare_consumer",
    "googletest:gtest_main",
    "graphic_2d:librender_service_base",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
  ]

  if (input_new_knuckle_dynamic_enabled) {
    defines += [ "OHOS_BUILD_ENABLE_NEW_KNUCKLE_DYNAMIC" ]
  }
}

ohos_unittest("ProductTypeParserTest") {
  module_out_path = module_output_path

  include_dirs = [
    "${mmi_path}/interfaces/native/innerkits/proxy/include",
    "${mmi_path}/interfaces/native/innerkits/event/include",
    "${mmi_path}/service/custom_config_parser/include",
    "${mmi_service_path}/window_manager/include",
    "${mmi_path}/service/touch_event_normalize/include",
    "${mmi_path}/service/product_property_config/include",
    "${mmi_path}/service/delegate_task/include",
    "${mmi_path}/service/event_handler/include",
    "${mmi_path}/service/module_loader/include",
    "${mmi_path}/util/json_parser/include",
    "${mmi_path}/service/connect_manager/include",
    "${mmi_path}/service/key_command/include",
    "${mmi_path}/service/timer_manager/include",
  ]

  configs = [
    "${mmi_path}:coverage_flags",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  cflags_cc = [ "-Wno-string-conversion" ]

  sources = [
    "custom_config_parser/test/product_type_parser_test.cpp",
    "custom_config_parser/test/product_type_parser_mock.cpp",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utilsbase",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "hilog:libhilog",
    "hilog:libhilog_base",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "window_manager:libdm_lite",
  ]
}

ohos_unittest("SpecialInputDeviceParserTest") {
  module_out_path = module_output_path

  include_dirs = [
    "${mmi_path}/interfaces/native/innerkits/proxy/include",
    "${mmi_path}/interfaces/native/innerkits/event/include",
    "${mmi_path}/service/custom_config_parser/include",
    "${mmi_service_path}/window_manager/include",
    "${mmi_path}/service/touch_event_normalize/include",
    "${mmi_path}/service/product_property_config/include",
    "${mmi_path}/service/delegate_task/include",
    "${mmi_path}/service/event_handler/include",
    "${mmi_path}/service/module_loader/include",
    "${mmi_path}/util/json_parser/include",
    "${mmi_path}/service/connect_manager/include",
    "${mmi_path}/service/key_command/include",
    "${mmi_path}/service/timer_manager/include",
  ]

  configs = [
    "${mmi_path}:coverage_flags",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  cflags_cc = [ "-Wno-string-conversion" ]

  sources = [
    "custom_config_parser/test/special_input_device_parser_test.cpp",
    "custom_config_parser/test/special_input_device_parser_mock.cpp",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utilsbase",
    "googletest:gmock_main",
    "googletest:gtest_main",
    "graphic_2d:2d_graphics",
    "hilog:libhilog",
    "hilog:libhilog_base",
    "hisysevent:libhisysevent",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "window_manager:libdm_lite",
  ]
}

ohos_unittest("EventDispatchOrderCheckerTest") {
  module_out_path = module_output_path
 
  configs = [
    "${mmi_path}:coverage_flags",
    "${mmi_path}/service/filter:mmi_event_filter_config",
    "${mmi_path}/common/anco/comm:mmi_anco_channel_config",
  ]
 
  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]
 
  cflags_cc = [ "-Wno-string-conversion" ]
 
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./ipc_blocklist.txt"
  }
 
  include_dirs = [
    "${mmi_path}/common/anco/comm/include",
    "${mmi_path}/interfaces/native/innerkits/proxy/include",
    "${mmi_path}/service/connect_manager/include",
    "${mmi_path}/service/delegate_task/include",
    "${mmi_path}/service/device_config/include",
    "${mmi_path}/service/device_manager/include",
    "${mmi_path}/service/event_dispatch/include",
    "${mmi_path}/service/event_handler/include",
    "${mmi_path}/service/filter/include",
    "${mmi_path}/service/interceptor/include",
    "${mmi_path}/service/key_command/include",
    "${mmi_path}/service/key_event_normalize/include",
    "${mmi_path}/service/module_loader/include",
    "${mmi_path}/service/monitor/include",
    "${mmi_path}/service/mouse_event_normalize/include",
    "${mmi_path}/service/nap_process/include",
    "${mmi_path}/service/subscriber/include",
    "${mmi_path}/service/timer_manager/include",
    "${mmi_path}/service/touch_event_normalize/include",
    "${mmi_path}/service/window_manager/include",
    "${mmi_path}/service/event_hook/include",
    "${mmi_path}/test/facility/mock/include",
    "${mmi_path}/util/common/include",
  ]
 
  if (input_feature_joystick) {
    include_dirs += [ "${mmi_path}/service/joystick/include" ]
  }
 
  sources = [ "event_hook/test/event_dispatch_order_checker_test.cpp" ]
 
  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/test/facility/libinput_interface:libinput_interface_sources",
    "${mmi_path}/test/facility/libinput_wrapper:libinput_wrapper_sources",
    "${mmi_path}/test/facility/virtual_device:virtual_device_sources",
    "${mmi_path}/util:libmmi-util",
  ]
 
  external_deps = [
    "cJSON:cjson",
    "c_utils:utils",
    "data_share:datashare_consumer",
    "googletest:gmock_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "window_manager:libwm",
  ]
}
 
ohos_unittest("EventLoopClosureCheckerTest") {
  module_out_path = module_output_path
 
  configs = [
    "${mmi_path}:coverage_flags",
    "${mmi_path}/service/filter:mmi_event_filter_config",
    "${mmi_path}/common/anco/comm:mmi_anco_channel_config",
  ]
 
  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]
 
  cflags_cc = [ "-Wno-string-conversion" ]
 
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./ipc_blocklist.txt"
  }
 
  include_dirs = [
    "${mmi_path}/common/anco/comm/include",
    "${mmi_path}/interfaces/native/innerkits/proxy/include",
    "${mmi_path}/service/connect_manager/include",
    "${mmi_path}/service/delegate_task/include",
    "${mmi_path}/service/device_config/include",
    "${mmi_path}/service/device_manager/include",
    "${mmi_path}/service/event_dispatch/include",
    "${mmi_path}/service/event_handler/include",
    "${mmi_path}/service/filter/include",
    "${mmi_path}/service/interceptor/include",
    "${mmi_path}/service/key_command/include",
    "${mmi_path}/service/key_event_normalize/include",
    "${mmi_path}/service/module_loader/include",
    "${mmi_path}/service/monitor/include",
    "${mmi_path}/service/mouse_event_normalize/include",
    "${mmi_path}/service/nap_process/include",
    "${mmi_path}/service/subscriber/include",
    "${mmi_path}/service/timer_manager/include",
    "${mmi_path}/service/touch_event_normalize/include",
    "${mmi_path}/service/window_manager/include",
    "${mmi_path}/service/event_hook/include",
    "${mmi_path}/test/facility/mock/include",
    "${mmi_path}/util/common/include",
  ]
 
  if (input_feature_joystick) {
    include_dirs += [ "${mmi_path}/service/joystick/include" ]
  }
 
  sources = [ "event_hook/test/event_loop_closure_checker_test.cpp" ]
 
  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/test/facility/libinput_interface:libinput_interface_sources",
    "${mmi_path}/test/facility/libinput_wrapper:libinput_wrapper_sources",
    "${mmi_path}/test/facility/virtual_device:virtual_device_sources",
    "${mmi_path}/util:libmmi-util",
  ]
 
  external_deps = [
    "cJSON:cjson",
    "c_utils:utils",
    "data_share:datashare_consumer",
    "googletest:gmock_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "window_manager:libwm",
  ]
}

ohos_unittest("KeyEventHookManagerTest") {
  module_out_path = module_output_path
 
  configs = [
    "${mmi_path}:coverage_flags",
    "${mmi_path}/service/filter:mmi_event_filter_config",
    "${mmi_path}/common/anco/comm:mmi_anco_channel_config",
  ]
 
  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]
 
  cflags_cc = [ "-Wno-string-conversion" ]
 
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./ipc_blocklist.txt"
  }
 
  include_dirs = [
    "${mmi_path}/common/anco/comm/include",
    "${mmi_path}/interfaces/native/innerkits/proxy/include",
    "${mmi_path}/service/connect_manager/include",
    "${mmi_path}/service/delegate_task/include",
    "${mmi_path}/service/device_config/include",
    "${mmi_path}/service/device_manager/include",
    "${mmi_path}/service/event_dispatch/include",
    "${mmi_path}/service/event_handler/include",
    "${mmi_path}/service/filter/include",
    "${mmi_path}/service/interceptor/include",
    "${mmi_path}/service/key_command/include",
    "${mmi_path}/service/key_event_normalize/include",
    "${mmi_path}/service/module_loader/include",
    "${mmi_path}/service/monitor/include",
    "${mmi_path}/service/mouse_event_normalize/include",
    "${mmi_path}/service/nap_process/include",
    "${mmi_path}/service/subscriber/include",
    "${mmi_path}/service/timer_manager/include",
    "${mmi_path}/service/touch_event_normalize/include",
    "${mmi_path}/service/window_manager/include",
    "${mmi_path}/test/facility/mock/include",
    "${mmi_path}/util/common/include",
    "${mmi_path}/service/event_hook/include",
    "${mmi_path}/service/event_hook/include/hook",
    "${mmi_path}/service/event_hook/include/checker",
  ]
 
  if (input_feature_joystick) {
    include_dirs += [ "${mmi_path}/service/joystick/include" ]
  }
 
  sources = [ "event_hook/test/key_event_hook_manager_test.cpp" ]
 
  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/test/facility/libinput_interface:libinput_interface_sources",
    "${mmi_path}/test/facility/libinput_wrapper:libinput_wrapper_sources",
    "${mmi_path}/test/facility/virtual_device:virtual_device_sources",
    "${mmi_path}/util:libmmi-util",
  ]
 
  external_deps = [
    "cJSON:cjson",
    "c_utils:utils",
    "data_share:datashare_consumer",
    "googletest:gmock_main",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "window_manager:libwm",
  ]
}

ohos_unittest("EventExpirationCheckerTest") {
  module_out_path = module_output_path
 
  configs = [
    "${mmi_path}:coverage_flags",
    "${mmi_path}/service/filter:mmi_event_filter_config",
  ]
 
  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]
 
  cflags_cc = [ "-Wno-string-conversion" ]
 
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./ipc_blocklist.txt"
  }
 
  include_dirs = [
    "${mmi_path}/service/event_hook/include",
    "${mmi_path}/test/facility/mock/include",
    "${mmi_path}/util/common/include",
    "${mmi_path}/service/event_hook/include",
    "${mmi_path}/service/event_hook/include/hook",
    "${mmi_path}/service/event_hook/include/checker",
  ]
 
  sources = [ "event_hook/test/event_expiration_checker_test.cpp" ]
 
  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]
 
  external_deps = [
    "c_utils:utils",
    "googletest:gmock_main",
    "hilog:libhilog"
  ]
}

group("mmi-service-tests") {
  testonly = true
  deps = [ "libinput_adapter/test" ]
}
