# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/test.gni")
import("../multimodalinput_mini.gni")

defines = input_default_defines
module_output_path = "multimodalinput/mmi_unit_out"
mmi_service_path = "${mmi_path}/service"

ohos_prebuilt_etc("mmi_device_config.ini") {
  source = "mmi_device_config.ini"
  relative_install_dir = "."
  subsystem_name = "multimodalinput"
  part_name = "input"
}

config("libmmi_server_config") {
  if (is_ohos && is_clang && (target_cpu == "arm" || target_cpu == "arm64") &&
      enhanced_opt) {
    cflags = []
    if (input_feature_enable_pgo && input_feature_product != "default") {
      cflags += [
        "-fprofile-use=" +
            rebase_path("${input_feature_pgo_path}/libmmi-server.profdata",
                        root_build_dir),
        "-Wno-error=backend-plugin",
        "-Wno-profile-instr-out-of-date",
        "-Wno-profile-instr-unprofiled",
      ]
    }
    if (input_feature_product == "pc" && target_cpu == "arm64") {
      cflags += [ "-moutline-atomics" ]
    }
  }
  include_dirs = [
    "account_manager/include",
    "app_state_manager/include",
    "device_config/include",
    "device_manager/include",
    "device_scalability/include",
    "device_state_manager/include",
    "delegate_task/include",
    "display_state_manager/include",
    "event_dispatch/include",
    "key_event_normalize/include",
    "event_handler/include",
    "event_dump/include",
    "fingersense_wrapper/include",
    "gesturesense_wrapper/include",
    "monitor/include",
    "interceptor/include",
    "dfx/include",
    "libinput_adapter/include",
    "message_handle/include",
    "module_loader/include",
    "hardware_cursor_pointer_manager/include",
    "window_manager/include",
    "touch_event_normalize/include",
    "key_command/include",
    "subscriber/include",
    "timer_manager/include",
    "permission_helper/include",
    "infrared_emitter/include",
    "${mmi_service_path}/connect_manager/include",
    "${mmi_service_path}/device_state_manager/include",
    "${mmi_service_path}/filter/include",
    "${mmi_service_path}/module_loader/include",
    "${mmi_service_path}/hardware_cursor_pointer_manager/include",
    "${mmi_service_path}/nap_process/include",
    "${mmi_service_path}/event_resample/include",
    "${mmi_path}/interfaces/native/innerkits/proxy/include",
    "${mmi_path}/interfaces/native/innerkits/event/include",
    "mouse_event_normalize/include",
    "${mmi_path}/interfaces/native/innerkits/common/include",
    "${mmi_path}/util/common/include",
    "${mmi_path}/util/socket/include",
    "${mmi_path}/util/network/include",
    "${mmi_path}/frameworks/proxy/event_handler/include",
    "//third_party/cJSON",
    "${preferences_path}/frameworks/native/include",
    "${graphics_path}/2d_graphics/include",
    "${mmi_path}/util/napi/include",
  ]

  if (input_feature_fingerprint) {
    include_dirs += [ "fingerprint_event_processor/include" ]
  }

  if (input_feature_crown) {
    include_dirs += [ "crown_transform_processor/include" ]
  }

  if (input_ext_feature_anco) {
    include_dirs += [
      "${mmi_ext_path}/anco_uds_manager/include",
      "${mmi_path}/common/anco/comm/include",
    ]
  }

  if (input_ext_feature_magiccursor) {
    include_dirs += [
      "${mmi_ext_path}/magic_cursor/include",
      "${g2d_ext_path}/sdf/include",
      "${surface_path}/interfaces/inner_api/surface",
      "${g2d_path}/rosen/modules/render_service_base/src",
    ]
  }

  if (input_feature_combination_key) {
    defines += [ "OHOS_BUILD_ENABLE_COMBINATION_KEY" ]
  }

  if (resource_schedule_service_enabled) {
    defines += [ "OHOS_RSS_CLIENT" ]
  }

  if (is_emulator) {
    defines += [ "OHOS_BUILD_EMULATOR" ]
  }
}

ohos_rust_shared_ffi("mmi_rust") {
  sources = [ "rust/src/lib.rs" ]
  external_deps = [ "hilog:hilog_rust" ]
  subsystem_name = "multimodalinput"
  part_name = "input"
}

ohos_rust_unittest("rust_mmi_test") {
  module_out_path = module_output_path
  sources = [ "rust/src/lib.rs" ]
  deps = [ ":mmi_rust" ]
  external_deps = [ "hilog:hilog_rust" ]
  subsystem_name = "multimodalinput"
  part_name = "input"
}

ohos_shared_library("libmmi-server") {
  sources = libmmi_service_sources
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  sources += [
    "account_manager/src/account_manager.cpp",
    "window_manager/src/knuckle_divergent_point.cpp",
    "window_manager/src/knuckle_drawing_manager.cpp",
    "window_manager/src/knuckle_dynamic_drawing_manager.cpp",
    "window_manager/src/knuckle_glow_point.cpp",
    "window_manager/src/knuckle_glow_trace_system.cpp",
    "window_manager/src/touch_drawing_manager.cpp",
  ]

  if (input_feature_keyboard) {
    sources += [
      "display_state_manager/src/display_event_monitor.cpp",
      "key_event_normalize/src/key_event_normalize.cpp",
      "key_event_normalize/src/key_unicode_transformation.cpp",
      "subscriber/src/key_gesture_manager.cpp",
      "subscriber/src/key_subscriber_handler.cpp",
    ]
    if (input_feature_combination_key) {
      sources += [
        "key_command/src/key_command_handler.cpp",
        "key_command/src/key_command_handler_util.cpp",
        "key_command/src/stylus_key_handler.cpp",
      ]
    }
  }

  if (input_feature_switch) {
    sources += [ "subscriber/src/switch_subscriber_handler.cpp" ]
  }

  sources += [ "infrared_emitter/src/infrared_emitter_controller.cpp" ]

  if (input_feature_mouse || input_feature_touchscreen) {
    sources += [ "touch_event_normalize/src/touch_event_normalize.cpp" ]
    if (input_feature_mouse) {
      sources += [
        "mouse_event_normalize/src/mouse_device_state.cpp",
        "mouse_event_normalize/src/mouse_event_normalize.cpp",
        "mouse_event_normalize/src/mouse_transform_processor.cpp",
        "touch_event_normalize/src/gesture_transform_processor.cpp",
        "touch_event_normalize/src/touchpad_transform_processor.cpp",
      ]
      if (input_feature_pointer_drawing) {
        sources += [ "window_manager/src/pointer_drawing_manager.cpp" ]
      } else {
        sources += [ "window_manager/src/i_pointer_drawing_manager.cpp" ]
      }
    }
    if (input_feature_touchscreen) {
      sources += [
        "event_resample/src/event_resample.cpp",
        "touch_event_normalize/src/tablet_tool_tranform_processor.cpp",
        "touch_event_normalize/src/touch_transform_processor.cpp",
      ]
    }
  }
  if (input_feature_fingerprint) {
    sources +=
        [ "fingerprint_event_processor/src/fingerprint_event_processor.cpp" ]
  }
  if (input_feature_crown) {
    sources += [ "crown_transform_processor/src/crown_transform_processor.cpp" ]
  }
  if (input_feature_joystick) {
    sources += [ "touch_event_normalize/src/joystick_transform_processor.cpp" ]
  }
  if (input_feature_monitor) {
    sources += [ "monitor/src/event_monitor_handler.cpp" ]
  }
  if (input_feature_interceptor) {
    sources += [ "interceptor/src/event_interceptor_handler.cpp" ]
  }

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  deps = [
    ":mmi_device_config.ini",
    ":mmi_rust",
    "${mmi_path}/etc/mouse_icon:input_mouse_icon",
    "${mmi_path}/service/connect_manager:mmi_connect_manager_service",
    "${mmi_path}/service/filter:mmi_event_filter_proxy",
    "${mmi_path}/util:libmmi-util",
    "//third_party/cJSON:cjson",
  ]

  if (input_ext_feature_anco) {
    deps += [ "${mmi_path}/common/anco/comm:mmi_anco_channel_proxy" ]
  }

  external_deps = [ "c_utils:utils" ]
  if (input_feature_pointer_drawing) {
    external_deps += [ "window_manager:libwm_lite" ]
  }

  if (input_ext_feature_magiccursor) {
    external_deps += [ "eventhandler:libeventhandler" ]
  }

  if (security_component_enable) {
    external_deps += [ "security_component_manager:libsecurity_component_sdk" ]
  }

  if (resource_schedule_service_enabled) {
    external_deps += [ "resource_schedule_service:ressched_client" ]
  }

  if (call_manager_service_enabled) {
    external_deps += [ "call_manager:tel_call_manager_api" ]
  }

  if (screenlock_manager_enabled) {
    defines += [ "SCREENLOCK_MANAGER_ENABLED" ]
    external_deps += [ "screenlock_mgr:screenlock_client" ]
  }

  external_deps += [
    "ability_base:want",
    "ability_base:zuri",
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:ability_manager",
    "ability_runtime:abilitykit_native",
    "ability_runtime:app_manager",
    "ability_runtime:dataobs_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libtokenid_sdk",
    "common_event_service:cesfwk_innerkits",
    "config_policy:configpolicy_util",
    "data_share:datashare_consumer",
    "drivers_interface_display:libdisplay_composer_hdi_impl_1.2",
    "drivers_interface_display:libdisplay_composer_proxy_1.0",
    "faultloggerd:libbacktrace_local",
    "ffrt:libffrt",
    "graphic_2d:2d_graphics",
    "graphic_2d:libcomposer",
    "graphic_2d:librender_service_client",
    "graphic_2d:window_animation",
    "hdf_core:libhdi",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "image_framework:image_native",
    "init:libbeget_proxy",
    "init:libbegetutil",
    "ipc:ipc_single",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "safwk:system_ability_fwk",
    "window_manager:libwm_lite",
    "window_manager:libwsutils",
  ]

  if (defined(use_rosen_drawing) && use_rosen_drawing) {
    defines += [ "USE_ROSEN_DRAWING" ]
  }

  if (enable_player_framework) {
    external_deps += [ "player_framework:media_client" ]
  }

  part_name = "input"
  subsystem_name = "multimodalinput"
}

import("//build/test.gni")
module_output_path = "multimodalinput/mmi_unit_out"

ohos_unittest("event_resample_test") {
  module_out_path = module_output_path
  include_dirs = [
    "${mmi_path}/service/event_resample/include",
    "${graphics_path}/2d_graphics/include",
  ]

  sources = [
    "event_resample/src/event_resample.cpp",
    "event_resample/test/event_resample_test.cpp",
  ]

  configs = [ ":libmmi_server_config" ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
    "//third_party/cJSON:cjson",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "c_utils:utils",
    "config_policy:configpolicy_util",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "window_manager:libwm",
  ]
}

ohos_unittest("TwoFingerLongTouchTest") {
  module_out_path = module_output_path
  include_dirs = [
    "${mmi_path}/service/key_command/include",
    "${mmi_path}/service/key_command/test",
    "${graphics_path}/2d_graphics/include",
  ]

  configs = [ ":libmmi_server_config" ]

  cflags = [ "-DUNIT_TEST" ]

  sources = [
    "key_command/src/key_command_handler.cpp",
    "key_command/src/key_command_handler_util.cpp",
    "key_command/test/ability_manager_client_stub.cpp",
    "key_command/test/two_finger_long_touch_test.cpp",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
    "//third_party/cJSON:cjson",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "c_utils:utils",
    "config_policy:configpolicy_util",
    "data_share:datashare_consumer",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "window_manager:libwm",
  ]

  if (enable_player_framework) {
    external_deps += [ "player_framework:media_client" ]
  }
}

ohos_unittest("EventFilterDeathRecipientTest") {
  module_out_path = module_output_path

  include_dirs = [ "${mmi_path}/service/filter/include" ]

  configs = [ ":libmmi_server_config" ]

  cflags = [ "-DUNIT_TEST" ]

  sources = [
    "${mmi_path}/service/filter/src/event_filter_death_recipient.cpp",
    "${mmi_path}/service/filter/test/event_filter_death_recipient_test.cpp",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
    "//third_party/cJSON:cjson",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "c_utils:utils",
    "config_policy:configpolicy_util",
    "data_share:datashare_consumer",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "window_manager:libwm",
  ]
}

ohos_unittest("EventFilterHandlerTest") {
  module_out_path = module_output_path

  include_dirs = [
    "${mmi_path}/service/filter/include",
    "${graphics_path}/2d_graphics/include",
  ]

  configs = [ ":libmmi_server_config" ]

  cflags = [
    "-DUNIT_TEST",
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [
    "${mmi_path}/service/filter/src/event_filter_handler.cpp",
    "${mmi_path}/service/filter/test/event_filter_handler_test.cpp",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
    "//third_party/cJSON:cjson",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "c_utils:utils",
    "config_policy:configpolicy_util",
    "data_share:datashare_consumer",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_single",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "window_manager:libwm",
  ]
}

ohos_unittest("ApplicationStateObserverTest") {
  module_out_path = module_output_path

  include_dirs = [ "${mmi_path}/service/app_state_manager/include" ]

  configs = [ ":libmmi_server_config" ]

  cflags = [
    "-DUNIT_TEST",
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [
    "${mmi_path}/service/app_state_manager/src/app_state_observer.cpp",
    "${mmi_path}/service/app_state_manager/test/app_state_observer_test.cpp",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
    "//third_party/cJSON:cjson",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_runtime:ability_manager",
    "ability_runtime:app_manager",
    "c_utils:utils",
    "config_policy:configpolicy_util",
    "data_share:datashare_consumer",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_single",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "window_manager:libwm",
  ]
}

ohos_unittest("TimerManagerTest") {
  module_out_path = module_output_path

  include_dirs = [ "${mmi_path}/service/timer_manager/include" ]

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "timer_manager/test/timer_manager_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
    "//third_party/cJSON:cjson",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "hilog:libhilog",
    "init:libbegetutil",
    "libinput:libinput-third-mmi",
  ]
}

ohos_unittest("KnuckleGlowPointTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [ "window_manager/test/knuckle_glow_point_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/test/facility/mock:mmi_mock_sources",
    "${mmi_path}/util:libmmi-util",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_runtime:dataobs_manager",
    "c_utils:utils",
    "drivers_interface_display:libdisplay_composer_hdi_impl_1.2",
    "drivers_interface_display:libdisplay_composer_proxy_1.0",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "libinput:libinput-third-mmi",
    "window_manager:libwm",
    "window_manager:libwsutils",
  ]
}

ohos_unittest("KnuckleDivergentPointTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [ "window_manager/test/knuckle_divergent_point_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/test/facility/mock:mmi_mock_sources",
    "${mmi_path}/util:libmmi-util",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_runtime:dataobs_manager",
    "c_utils:utils",
    "drivers_interface_display:libdisplay_composer_hdi_impl_1.2",
    "drivers_interface_display:libdisplay_composer_proxy_1.0",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "libinput:libinput-third-mmi",
    "window_manager:libwm",
    "window_manager:libwsutils",
  ]
}

ohos_unittest("KnuckleGlowTraceSystemTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [ "window_manager/test/knuckle_glow_trace_system_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/test/facility/mock:mmi_mock_sources",
    "${mmi_path}/util:libmmi-util",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_runtime:dataobs_manager",
    "c_utils:utils",
    "drivers_interface_display:libdisplay_composer_hdi_impl_1.2",
    "drivers_interface_display:libdisplay_composer_proxy_1.0",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "libinput:libinput-third-mmi",
    "window_manager:libwm",
    "window_manager:libwsutils",
  ]
}

ohos_unittest("KnuckleDrawingManagerTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [ "window_manager/test/knuckle_drawing_manager_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "c_utils:utils",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "libinput:libinput-third-mmi",
    "window_manager:libwm",
    "window_manager:libwsutils",
  ]
}

ohos_unittest("KnuckleDynamicDrawingManagerTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  sources = [ "window_manager/test/knuckle_dynamic_drawing_manager_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "c_utils:utils",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "libinput:libinput-third-mmi",
    "window_manager:libwm",
    "window_manager:libwsutils",
  ]
}

ohos_unittest("InputWindowsManagerTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "window_manager/test/input_windows_manager_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "ability_runtime:dataobs_manager",
    "data_share:datashare_consumer",
    "drivers_interface_display:libdisplay_composer_hdi_impl_1.2",
    "drivers_interface_display:libdisplay_composer_proxy_1.0",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "libinput:libinput-third-mmi",
    "window_manager:libwm",
    "window_manager:libwsutils",
  ]

  if (enable_player_framework) {
    external_deps += [ "player_framework:media_client" ]
  }
}

ohos_unittest("AccountManagerTest") {
  module_out_path = module_output_path

  include_dirs = [
    "${mmi_path}/service/account_manager/include",
    "${mmi_service_path}/device_state_manager/include",
  ]

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "account_manager/test/account_manager_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "ability_runtime:wantagent_innerkits",
    "c_utils:utils",
    "call_manager:tel_call_manager_api",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_consumer",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
  ]
}

ohos_unittest("SubscriberTest") {
  module_out_path = module_output_path

  include_dirs = [
    "${mmi_path}/service/subscriber/include",
    "${mmi_service_path}/device_state_manager/include",
  ]

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [
    "subscriber/test/key_gesture_manager_test.cpp",
    "subscriber/test/key_subscriber_handler_test.cpp",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:wantagent_innerkits",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "data_share:datashare_consumer",
    "hilog:libhilog",
    "init:libbegetutil",
    "libinput:libinput-third-mmi",
  ]

  if (call_manager_service_enabled) {
    external_deps += [ "call_manager:tel_call_manager_api" ]
  }

  if (input_feature_switch) {
    external_deps += [
      "graphic_2d:2d_graphics",
      "graphic_2d:librender_service_client",
      "window_manager:libwm",
    ]
  }

  if (enable_player_framework) {
    external_deps += [ "player_framework:media_client" ]
  }
}

ohos_unittest("NapProcessTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "nap_process/test/nap_process_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "c_utils:utils",
    "init:libbegetutil",
  ]
}

ohos_unittest("MonitorTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "monitor/test/event_monitor_handler_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "c_utils:utils",
    "data_share:datashare_consumer",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "libinput:libinput-third-mmi",
    "window_manager:libwm",
  ]

  if (enable_player_framework) {
    external_deps += [ "player_framework:media_client" ]
  }
}

ohos_unittest("ModuleLoaderTest") {
  module_out_path = module_output_path

  include_dirs = [
    "${mmi_path}/util/common/include",
    "//third_party/node/src",
  ]

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [
    "module_loader/test/mmi_service_test.cpp",
    "module_loader/test/uds_server_test.cpp",
    "module_loader/test/watchdog_task_test.cpp",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "ability_runtime:app_manager",
    "c_utils:utils",
    "data_share:datashare_consumer",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "libinput:libinput-third-mmi",
    "security_component_manager:libsecurity_component_sdk",
    "window_manager:libwm",
  ]

  if (enable_player_framework) {
    external_deps += [ "player_framework:media_client" ]
  }
}

ohos_unittest("KeyEventNormalizeTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "key_event_normalize/test/key_event_normalize_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/test/facility/libinput_wrapper:libinput_wrapper_sources",
    "${mmi_path}/test/facility/virtual_device:virtual_device_sources",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "libinput:libinput-third-mmi",
    "window_manager:libwm",
  ]
}

ohos_unittest("KeyCommandTest") {
  module_out_path = module_output_path

  include_dirs = [ "${mmi_path}/test/unittest/common/include" ]

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [
    "key_command/test/key_command_handler_test.cpp",
    "key_command/test/key_command_handler_util_test.cpp",
    "key_command/test/setting_datashare_test.cpp",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "ability_runtime:app_manager",
    "c_utils:utils",
    "config_policy:configpolicy_util",
    "data_share:datashare_consumer",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "libinput:libinput-third-mmi",
    "window_manager:libwm",
  ]

  if (enable_player_framework) {
    external_deps += [ "player_framework:media_client" ]
  }
}

ohos_unittest("StylusKeyTest") {
  module_out_path = module_output_path

  include_dirs = [ "${mmi_path}/test/unittest/common/include" ]

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "key_command/test/stylus_key_handler_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "libinput:libinput-third-mmi",
  ]
}

ohos_unittest("InfraredEmitterTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "infrared_emitter/test/infrared_emitter_controller_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "hdf_core:libhdi",
    "hilog:libhilog",
    "init:libbegetutil",
  ]
}

ohos_unittest("InterceptorTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "interceptor/test/event_interceptor_handler_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "hilog:libhilog",
    "init:libbegetutil",
  ]
}

ohos_unittest("InterceptorExTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [
    "interceptor/src/event_interceptor_handler.cpp",
    "interceptor/test/event_interceptor_handler_ex_test.cpp",
    "interceptor/test/mock.cpp",
  ]

  deps = [
    "${mmi_path}/util:libmmi-util",
    "//third_party/googletest:gmock_main",
  ]

  external_deps = [
    "data_share:datashare_consumer",
    "hilog:libhilog",
    "init:libbegetutil",
    "libinput:libinput-third-mmi",
    "preferences:native_preferences",
  ]

  if (enable_player_framework) {
    external_deps += [ "player_framework:media_client" ]
  }
}

ohos_unittest("KeyAutoRepeatExTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [
    "event_handler/test/key_auto_repeat_ex_test.cpp",
    "event_handler/test/mock.cpp",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/test/facility/mock:mmi_mock_sources",
    "${mmi_path}/util:libmmi-util",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "init:libbegetutil",
    "libinput:libinput-third-mmi",
  ]
}

ohos_unittest("EventHandlerTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [
    "event_handler/test/anr_manager_test.cpp",
    "event_handler/test/event_normalize_handler_test.cpp",
    "event_handler/test/gesture_handler_test.cpp",
    "event_handler/test/input_event_handler_test.cpp",
    "event_handler/test/key_auto_repeat_test.cpp",
    "event_handler/test/key_event_value_transformation_test.cpp",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/test/facility/libinput_wrapper:libinput_wrapper_sources",
    "${mmi_path}/test/facility/virtual_device:virtual_device_sources",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "c_utils:utils",
    "data_share:datashare_consumer",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "libinput:libinput-third-mmi",
    "window_manager:libwm",
  ]

  if (enable_player_framework) {
    external_deps += [ "player_framework:media_client" ]
  }
}

ohos_unittest("EventNormalizeHandlerTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "event_handler/test/event_normalize_handler_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/test/facility/libinput_wrapper:libinput_wrapper_sources",
    "${mmi_path}/test/facility/virtual_device:virtual_device_sources",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
    "libinput:libinput-third-mmi",
    "window_manager:libwm",
  ]
}

ohos_unittest("EventHandlerEXTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "event_handler/test/event_normalize_handler_ex_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/test/facility/libinput_wrapper:libinput_wrapper_sources",
    "${mmi_path}/test/facility/mock:mmi_mock_sources",
    "${mmi_path}/test/facility/virtual_device:virtual_device_sources",
    "${mmi_path}/util:libmmi-util",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "c_utils:utils",
    "data_share:datashare_consumer",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "libinput:libinput-third-mmi",
    "window_manager:libwm",
  ]
}

ohos_unittest("EventDispatchTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "event_dispatch/test/event_dispatch_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "ability_runtime:dataobs_manager",
    "c_utils:utils",
    "data_share:datashare_consumer",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "libinput:libinput-third-mmi",
    "window_manager:libwm",
    "window_manager:libwsutils",
  ]

  if (enable_player_framework) {
    external_deps += [ "player_framework:media_client" ]
  }
}

ohos_unittest("LibinputAdapterTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "libinput_adapter/test/libinput_adapter_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "hilog:libhilog",
    "libinput:libinput-third-mmi",
  ]
}

ohos_unittest("ServerMsgHandlerTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [
    "message_handle/test/authorize_helper_test.cpp",
    "message_handle/test/client_death_handler_test.cpp",
    "message_handle/test/inject_notice_manager_test.cpp",
    "message_handle/test/server_msg_handler_test.cpp",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "ability_runtime:ability_connect_callback_stub",
    "ability_runtime:dataobs_manager",
    "c_utils:utils",
    "data_share:datashare_consumer",
    "ffrt:libffrt",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_single",
    "libinput:libinput-third-mmi",
    "napi:ace_napi",
    "security_component_manager:libsecurity_component_sdk",
    "window_manager:libwm",
  ]

  if (enable_player_framework) {
    external_deps += [ "player_framework:media_client" ]
  }
}

ohos_unittest("PermissionHelperTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "permission_helper/test/permission_helper_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "ability_runtime:dataobs_manager",
    "access_token:libaccesstoken_sdk",
    "c_utils:utils",
    "hilog:libhilog",
    "init:libbegetutil",
    "libinput:libinput-third-mmi",
    "security_component_manager:libsecurity_component_sdk",
  ]
}

ohos_unittest("DisplayStateManagerTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [
    "display_state_manager/test/display_event_monitor_test.cpp",
    "display_state_manager/test/mock.cpp",
  ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
    "//third_party/googletest:gmock_main",
  ]

  external_deps = [
    "ability_base:want",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "libinput:libinput-third-mmi",
    "window_manager:libwm",
  ]
}

ohos_unittest("DeviceManagerTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "device_manager/test/input_device_manager_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "hilog:libhilog",
    "init:libbegetutil",
    "libinput:libinput-third-mmi",
  ]
}

ohos_unittest("DeviceConfigTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "device_config/test/device_config_file_parser_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
    "//third_party/googletest:gmock_main",
  ]
}

ohos_unittest("DelegateTaskTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "delegate_task/test/delegate_tasks_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "hilog:libhilog",
    "init:libbegetutil",
  ]
}

ohos_unittest("ConnectManagerTest") {
  module_out_path = module_output_path

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "connect_manager/test/multimodal_input_connect_stub_test.cpp" ]

  deps = [ "${mmi_path}/service:libmmi-server" ]

  external_deps = [
    "ability_runtime:app_manager",
    "data_share:datashare_consumer",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_single",
    "libinput:libinput-third-mmi",
    "security_component_manager:libsecurity_component_sdk",
    "window_manager:libwm",
  ]

  if (enable_player_framework) {
    external_deps += [ "player_framework:media_client" ]
  }
}

ohos_unittest("ConnectManagerProxyEXTest") {
  module_out_path = module_output_path

  include_dirs = [
    "connect_manager/test",
    "${mmi_path}/common/anco/comm/include",
    "interfaces/native/innerkits/proxy/include",
  ]

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [
    "${mmi_path}/common/anco/comm/src/anco_channel_death_recipient.cpp",
    "${mmi_path}/common/anco/comm/src/anco_channel_proxy.cpp",
    "${mmi_path}/frameworks/proxy/events/src/i_anco_consumer.cpp",
    "connect_manager/src/multimodal_input_connect_def_parcel.cpp",
    "connect_manager/src/multimodal_input_connect_proxy.cpp",
    "connect_manager/test/message_parcel_mock.cpp",
    "connect_manager/test/multimodal_input_connect_proxy_ex_test.cpp",
  ]

  deps = [
    "${mmi_path}/util:libmmi-util",
    "//third_party/googletest:gmock_main",
  ]

  external_deps = [
    "ability_runtime:app_manager",
    "access_token:libaccesstoken_sdk",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_single",
    "libinput:libinput-third-mmi",
    "security_component_manager:libsecurity_component_sdk",
    "window_manager:libwm",
  ]
}

ohos_unittest("ConnectManagerEXTest") {
  module_out_path = module_output_path

  include_dirs = [ "connect_manager/test" ]

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [
    "connect_manager/src/multimodal_input_connect_def_parcel.cpp",
    "connect_manager/src/multimodal_input_connect_stub.cpp",
    "connect_manager/test/message_parcel_mock.cpp",
    "connect_manager/test/multimodal_input_connect_stub_ex_test.cpp",
  ]

  deps = [
    "${mmi_path}/util:libmmi-util",
    "//third_party/googletest:gmock_main",
  ]

  external_deps = [
    "ability_runtime:app_manager",
    "access_token:libaccesstoken_sdk",
    "data_share:datashare_consumer",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_single",
    "libinput:libinput-third-mmi",
    "security_component_manager:libsecurity_component_sdk",
    "window_manager:libwm",
  ]

  if (enable_player_framework) {
    external_deps += [ "player_framework:media_client" ]
  }
}

ohos_unittest("EventDumpTest") {
  module_out_path = module_output_path

  include_dirs = [ "${mmi_path}/test/unittest/common/include" ]

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "event_dump/test/event_dump_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "data_share:datashare_consumer",
    "graphic_2d:2d_graphics",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "libinput:libinput-third-mmi",
    "window_manager:libwm",
  ]

  if (enable_player_framework) {
    external_deps += [ "player_framework:media_client" ]
  }
}

ohos_unittest("DfxHisysEventTest") {
  module_out_path = module_output_path

  include_dirs = [ "${mmi_path}/test/unittest/common/include" ]

  configs = [
    "${mmi_path}:coverage_flags",
    ":libmmi_server_config",
  ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  sources = [ "dfx/test/dfx_hisysevent_test.cpp" ]

  deps = [
    "${mmi_path}/service:libmmi-server",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "hilog:libhilog",
    "init:libbegetutil",
    "libinput:libinput-third-mmi",
  ]
}

group("mmi-service-tests") {
  testonly = true
  deps = [ "libinput_adapter/test" ]
}
