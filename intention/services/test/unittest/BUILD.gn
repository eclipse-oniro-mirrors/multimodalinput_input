# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("../../../../device_status.gni")

module_output_path = "${device_status_part_name}/unit_out"

ohos_unittest("MonitorTest") {
  module_out_path = module_output_path

  include_dirs = [
    "${device_status_root_path}/intention/services/device_manager/include",
    "${device_status_root_path}/libs/interface",
    "${device_status_service_path}/communication/service/include",
  ]

  sources = [ "src/monitor_test.cpp" ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  deps = [
    "${device_status_interfaces_path}/innerkits:devicestatus_client",
    "${device_status_root_path}/intention/prototype:intention_prototype",
    "${device_status_root_path}/services:devicestatus_static_service",
    "${device_status_root_path}/utils/ipc:devicestatus_ipc",
    "${device_status_utils_path}:devicestatus_util",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "c_utils:utils",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "input:libmmi-client",
    "window_manager:libdm",
  ]
}

ohos_unittest("EnumeratorTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = true
    blocklist = "./ipc_blocklist.txt"
  }

  module_out_path = module_output_path

  include_dirs = [
    "${device_status_root_path}/intention/services/device_manager/include",
    "${device_status_root_path}/libs/interface",
    "${device_status_service_path}/communication/service/include",
  ]

  sources = [ "src/enumerator_test.cpp" ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  deps = [
    "${device_status_interfaces_path}/innerkits:devicestatus_client",
    "${device_status_root_path}/intention/prototype:intention_prototype",
    "${device_status_root_path}/services:devicestatus_static_service",
    "${device_status_root_path}/utils/ipc:devicestatus_ipc",
    "${device_status_utils_path}:devicestatus_util",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "c_utils:utils",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "input:libmmi-client",
    "window_manager:libdm",
  ]
}

ohos_unittest("DeviceTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    blocklist = "./ipc_blocklist.txt"
  }

  module_out_path = module_output_path
  include_dirs = [
    "${device_status_root_path}/intention/services/device_manager/include",
    "${device_status_root_path}/libs/interface",
    "${device_status_service_path}/communication/service/include",
  ]
  sources = [ "src/device_test.cpp" ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  deps = [
    "${device_status_interfaces_path}/innerkits:devicestatus_client",
    "${device_status_root_path}/intention/prototype:intention_prototype",
    "${device_status_root_path}/services:devicestatus_static_service",
    "${device_status_root_path}/utils/ipc:devicestatus_ipc",
    "${device_status_utils_path}:devicestatus_util",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "c_utils:utils",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "input:libmmi-client",
    "window_manager:libdm",
  ]
}

ohos_unittest("IntentionDeviceManagerTest") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = true
    blocklist = "./ipc_blocklist.txt"
  }

  module_out_path = module_output_path

  include_dirs = [
    "include",
    "${device_status_interfaces_path}/innerkits/interaction/include",
    "${intention_root_path}/services/device_manager/include",
    "${device_status_utils_path}",
    "${device_status_utils_path}/include",
    "${device_status_root_path}/services/native/include",
    "${device_status_root_path}/services/delegate_task/include",
    "${device_status_interfaces_path}/innerkits/include",
    "${device_status_root_path}/libs/interface",
    "${device_status_service_path}/communication/service/include",
    "${device_status_service_path}/communication/base",
    "${device_status_service_path}/interaction/drag/include",
    "${intention_root_path}/scheduler/timer_manager/include",
  ]

  sources = [ "src/device_manager_test.cpp" ]

  cflags = [
    "-Dprivate=public",
    "-Dprotected=public",
  ]

  deps = [
    "${device_status_root_path}/intention/cooperate/plugin:intention_cooperate",
    "${device_status_root_path}/intention/prototype:intention_prototype",
    "${device_status_root_path}/intention/scheduler/timer_manager:intention_timer_manager",
    "${device_status_root_path}/intention/services/device_manager:intention_device_manager",
    "${device_status_root_path}/services:devicestatus_service",
    "${device_status_root_path}/services:devicestatus_static_service",
    "${device_status_root_path}/services/interaction/drag:interaction_drag",
    "${device_status_root_path}/utils/common:devicestatus_util",
    "${device_status_root_path}/utils/ipc:devicestatus_ipc",
    "//third_party/googletest:gtest_main",
  ]

  external_deps = [
    "ability_runtime:app_manager",
    "access_token:libaccesstoken_sdk",
    "cJSON:cjson",
    "c_utils:utils",
    "graphic_2d:librender_service_base",
    "graphic_2d:librender_service_client",
    "graphic_2d:window_animation",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "input:libmmi-client",
    "ipc:ipc_single",
    "window_manager:libdm",
    "window_manager:libwm",
  ]
}

group("unittest") {
  testonly = true
  deps = []

  deps += [
    ":DeviceTest",
    ":EnumeratorTest",
    ":IntentionDeviceManagerTest",
    ":MonitorTest",
  ]
}
