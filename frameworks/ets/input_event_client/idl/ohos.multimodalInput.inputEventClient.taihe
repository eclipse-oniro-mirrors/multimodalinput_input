/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@!namespace("@ohos.multimodalInput.inputEventClient", "inputEventClient")
from ohos.multimodalInput.touchEvent use TouchEvent;
from ohos.multimodalInput.mouseEvent use MouseEvent;
@!sts_inject("""
static { loadLibrary("InputEventClient.z") }
""")

struct KeyEvent {
    isPressed: bool;
    keyCode: i32;
    keyDownDuration: i32;
    isIntercepted: bool;
}

struct TouchEventData {
    touchEvent: TouchEvent;
}

struct MouseEventData {
    mouseEvent: MouseEvent;
}

struct KeyEventData {
    keyEvent: KeyEvent;
}

struct KeyEventInfo {
    KeyEvent: KeyEvent;
}

@rename("injectKeyEvent")
function InjectKeyEventSync(keyEvent: KeyEventData): void;
@rename("injectEvent")
function InjectEventSync(keyEvent: KeyEventInfo): void;
@rename("injectMouseEvent")
function InjectMouseEventSync(mouseEvent: MouseEventData): void;
@rename("injectTouchEvent")
function InjectTouchEventSync(touchEvent: TouchEventData): void;
@rename("permitInjection")
function PermitInjectionSync(result: bool): void;
