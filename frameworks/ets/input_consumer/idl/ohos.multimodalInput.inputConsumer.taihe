/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@!namespace("@ohos.multimodalInput.inputConsumer", "inputConsumer")
from ohos.multimodalInput.keyEvent use KeyEvent;
@!sts_inject("""
static { loadLibrary("InputConsumer.z") }
""")

@!sts_inject_into_module("import * as ohos_multimodalInput_keyEvent from './@ohos.multimodalInput.keyEvent';")

struct KeyOptions {
    preKeys: Array<i32>;
    finalKey: i32;
    isFinalKeyDown: bool;
    finalKeyDownDuration: i32;
    isRepeat: Optional<bool>;
}

struct HotkeyOptions {
    preKeys: Array<i32>;
    finalKey: i32;
    isRepeat: Optional<bool>;
}

struct KeyPressedConfig {
    key: i32;
    action: i32;
    isRepeat: bool;
}

struct InfraredFrequency {
    max: i32;
    min: i32;
}

@!sts_inject("""
    function on(type: 'key', keyOptions: KeyOptions, callback: (info: KeyOptions) => void) {
        return onKey(keyOptions, callback, callback);
    }
    function off(type: 'key', keyOptions: KeyOptions, callback?: (info: KeyOptions) => void) {
        return offKey(keyOptions, callback);
    }
""")
@!sts_inject("""
    function on(type: 'hotkeyChange', hotkeyOptions: HotkeyOptions, callback: (info: HotkeyOptions) => void) {
        return onHotkeyChange(hotkeyOptions, callback, callback);
    }
    function off(type: 'hotkeyChange', hotkeyOptions: HotkeyOptions, callback?: (info: HotkeyOptions) => void) {
        return offHotkeyChange(hotkeyOptions, callback);
    }
""")
@!sts_inject("""
    function on(type: 'keyPressed', options: KeyPressedConfig,
        callback: (info: ohos_multimodalInput_keyEvent.KeyEvent) => void) {
        return onKeyPressed(options, callback, callback);
    }
    function off(type: 'keyPressed', callback?: (info: ohos_multimodalInput_keyEvent.KeyEvent) => void) {
        return offKeyPressed(callback);
    }
""")

function onKey(keyOptions: KeyOptions, f: (info: KeyOptions) => void, opq: Opaque);
function offKey(keyOptions: KeyOptions, opq: Optional<Opaque>);
function onHotkeyChange(hotkeyOptions: HotkeyOptions, f: (info: HotkeyOptions) => void, opq: Opaque);
function offHotkeyChange(hotkeyOptions: HotkeyOptions, opq: Optional<Opaque>);
function onKeyPressed(options: KeyPressedConfig, f: (info: KeyEvent) => void, opq: Opaque);
function offKeyPressed(opq: Optional<Opaque>);