# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/test.gni")
import("../../multimodalinput_mini.gni")

ohos_source_set("input-manager") {
  sources = [
    "src/input_manager_command.cpp",
    "src/input_sendevent_command.cpp",
    "src/input_enable_key_status_command.cpp",
  ]
  if (input_feature_event_recorder) {
    sources += [
      "src/device_manager.cpp",
      "src/event_recorder.cpp",
      "src/event_replayer.cpp",
      "src/input_device.cpp",
      "src/input_replay_command.cpp",
    ]
  }
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  include_dirs = [
    "include",
    "${mmi_path}/util/common/include",
    "${mmi_path}/frameworks/proxy/events/include",
    "${mmi_path}/frameworks/proxy/event_handler/include",
    "${mmi_path}/frameworks/proxy/module_loader/include",
    "${mmi_path}/service/event_handler/include",
    "${mmi_path}/service/custom_config_parser/include",
    "${mmi_path}/service/product_property_config/include",
    "${mmi_path}/util/json_parser/include",
  ]

  deps = [
    "${mmi_path}/frameworks/proxy:libmmi-client",
    "${mmi_path}/util:libmmi-util",
  ]

  external_deps = [
    "cJSON:cjson",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "hilog:libhilog",
    "image_framework:image_native",
    "init:libbegetutil",
    "ipc:ipc_core",
  ]
  subsystem_name = "multimodalinput"
  part_name = "input"
}

ohos_executable("uinput") {
  defines = input_default_defines
  sources = [ "src/main.cpp" ]
  configs = [ "${mmi_path}:coverage_flags" ]
  include_dirs = [
    "include",
    "${mmi_path}/interfaces/native/innerkits/event/include",
  ]
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  deps = [
    "${mmi_path}/tools/inject_event:input-manager",
    "${mmi_path}/service/custom_config_parser:mmi_custom_config_parser",
    "${mmi_path}/util:mmi_json_parser",
    ]
  external_deps = [
    "c_utils:utils",
    "hilog:libhilog",
  ]
  subsystem_name = "multimodalinput"
  part_name = "input"
}

module_output_path = "input/input"
ohos_unittest("InjectEventTest") {
  module_out_path = module_output_path
  configs = [ "${mmi_path}:coverage_flags" ]
  include_dirs = [
    "include",
    "${mmi_path}/service/custom_config_parser/include",
    "${mmi_path}/service/product_property_config/include",
    "${mmi_path}/util/json_parser/include"
    ]

  sources = [
    "test/inject_event_test.cpp",
    "test/input_sendevent_command_test.cpp",
    "test/input_enable_key_status_command_test.cpp",
  ]
  if (input_feature_event_recorder) {
    sources += [
      "test/device_manager_test.cpp",
      "test/event_recorder_test.cpp",
      "test/event_replayer_test.cpp",
      "test/input_device_test.cpp",
      "test/input_replay_command_test.cpp",
    ]
  }

  deps = [
    "${mmi_path}/frameworks/proxy:libmmi-client",
    "${mmi_path}/tools/inject_event:input-manager",
    "${mmi_path}/util:libmmi-util",
    "${mmi_path}/service/custom_config_parser:mmi_custom_config_parser",
    "${mmi_path}/util:mmi_json_parser",
  ]

  if (input_feature_event_recorder) {
    defines = [ "private = public" ]
  }

  external_deps = [
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "googletest:gtest_main",
    "hilog:libhilog",
    "image_framework:image_native",
    "ipc:ipc_core",
  ]
}

group("inject_event") {
  testonly = true
  deps = [ ":InjectEventTest" ]
}
